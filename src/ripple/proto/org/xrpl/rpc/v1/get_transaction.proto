syntax = "proto3";

package org.xrpl.rpc.v1;
option java_package = "org.xrpl.rpc.v1";
option java_multiple_files = true;

import "org/xrpl/rpc/v1/meta.proto";
import "org/xrpl/rpc/v1/ledger.proto";
import "org/xrpl/rpc/v1/transaction.proto";
import "org/xrpl/rpc/v1/common.proto";

// Next field: 4
message GetTransactionRequest {

    // hash of the transaction. 32 bytes
    // ATTN: this is in binary, not hex. The JSON API accepts a hex string for
    // a transaction hash, but here we need that hex string converted into its
    // binary form. Each pair of hex characters should be converted into its
    // corresponding byte. For example, the 4 character hex string "00FF"
    // should be converted to a 2 byte array: [0, 255]
    bytes hash = 1;

    // if true, return data in binary format. defaults to false
    bool binary = 2;

    // If the transaction was not found, server will report whether the entire
    // specified range was searched. The value is contained in the error message.
    // The error message is of the form:
    // "txn not found. searched_all = [true,false]"
    // If the transaction was found, this parameter is ignored.
    LedgerRange ledger_range = 3;
}

// Next field: 9
message GetTransactionResponse {

    oneof serialized_transaction {

        Transaction transaction = 1;
        // Variable length
        bytes transaction_binary = 2;
    };
    // Sequence number of ledger that contains this transaction
    uint32 ledger_index = 3;

    // 32 bytes
    bytes hash = 4;

    // whether the ledger has been validated
    bool validated = 5;

    // metadata about the transaction
    oneof serialized_meta {
        Meta meta = 6;
        // Variable length
        bytes meta_binary = 7;
    }

    Date date = 8;
}

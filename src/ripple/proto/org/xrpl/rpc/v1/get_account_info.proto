syntax = "proto3";

package org.xrpl.rpc.v1;
option java_package = "org.xrpl.rpc.v1";
option java_multiple_files = true;

import "org/xrpl/rpc/v1/ledger_objects.proto";
import "org/xrpl/rpc/v1/amount.proto";
import "org/xrpl/rpc/v1/account.proto";
import "org/xrpl/rpc/v1/ledger.proto";
import "org/xrpl/rpc/v1/common.proto";

// A request to get info about an account.
// Next field: 6
message GetAccountInfoRequest
{
    // The address to get info about.
    AccountAddress account = 1;

    bool strict = 2;

    // Which ledger to use to retrieve data.
    // If this field is not set, the server will use the open ledger.
    // The open ledger includes data that is not validated or final.
    // To retrieve the most up to date and validated data, use
    // SHORTCUT_VALIDATED
    LedgerSpecifier ledger = 3;

    bool queue = 4;

    bool signer_lists = 5;
}

// Response to GetAccountInfo RPC
// Next field: 6
message GetAccountInfoResponse
{
    AccountRoot account_data = 1;

    SignerList signer_list = 2;

    uint32 ledger_index = 3;

    QueueData queue_data = 4;

    bool validated = 5;
}

// Aggregate data about queued transactions
// Next field: 7
message QueueData
{
    uint32 txn_count = 1;

    bool auth_change_queued = 2;

    uint32 lowest_sequence = 3;

    uint32 highest_sequence = 4;

    XRPDropsAmount max_spend_drops_total = 5;

    repeated QueuedTransaction transactions = 6;
}

// Data about a single queued transaction
// Next field: 7
message QueuedTransaction
{
    bool auth_change = 1;

    XRPDropsAmount fee = 2;

    uint64 fee_level = 3 [jstype=JS_STRING];

    XRPDropsAmount max_spend_drops = 4;

    Sequence sequence = 5;

    LastLedgerSequence last_ledger_sequence = 6;
}

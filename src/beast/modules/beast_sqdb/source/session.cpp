//------------------------------------------------------------------------------
/*
    This file is part of Beast: https://github.com/vinniefalco/Beast
    Copyright 2013, Vinnie Falco <vinnie.falco@gmail.com>

    Permission to use, copy, modify, and/or distribute this software for any
    purpose  with  or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE  SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH  REGARD  TO  THIS  SOFTWARE  INCLUDING  ALL  IMPLIED  WARRANTIES  OF
    MERCHANTABILITY  AND  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY  SPECIAL ,  DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER  RESULTING  FROM  LOSS  OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION  OF  CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

    Portions based on SOCI - The C++ Database Access Library: 

    SOCI: http://soci.sourceforge.net/

    This file incorporates work covered by the following copyright
    and permission notice:

    Copyright (C) 2004 Maciej Sobczak, Stephen Hutton, Mateusz Loskot,
    Pawel Aleksander Fedorynski, David Courtney, Rafal Bobrowski,
    Julian Taylor, Henning Basold, Ilia Barahovski, Denis Arnaud,
    Daniel Lidström, Matthieu Kermagoret, Artyom Beilis, Cory Bennett,
    Chris Weed, Michael Davidsaver, Jakub Stachowski, Alex Ott, Rainer Bauer,
    Martin Muenstermann, Philip Pemberton, Eli Green, Frederic Chateau,
    Artyom Tonkikh, Roger Orr, Robert Massaioli, Sergey Nikulov,
    Shridhar Daithankar, Sören Meyer-Eppler, Mario Valesco.

    Boost Software License - Version 1.0, August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/
//==============================================================================

namespace sqdb
{

class session::Sqlite3
{
public:
    Sqlite3()
    {
        int threadSafe = sqlite3_threadsafe();

        if (threadSafe == 0)
            Throw(Error().fail(__FILE__, __LINE__, Error::assertFailed));

#if 0
        int result = sqlite3_config(SQLITE_CONFIG_MULTITHREAD);

        if (result != SQLITE_OK)
            Throw(Error().fail(__FILE__, __LINE__, Error::assertFailed));
#endif

        sqlite3_initialize();
    }

    ~Sqlite3()
    {
        sqlite3_shutdown();
    }
};

//------------------------------------------------------------------------------

session::session()
    : prepare (this)
    , m_instance (SharedSingleton <Sqlite3>::getInstance ())
    , m_bInTransaction (false)
    , m_connection (nullptr)
{
}

session::session(const session& deferredClone)
    : prepare (this)
    , m_instance (SharedSingleton <Sqlite3>::getInstance ())
    , m_bInTransaction (false)
    , m_connection (nullptr)
    , m_fileName (deferredClone.m_fileName)
    , m_connectString (deferredClone.m_connectString)
{
    // shouldn't be needed since deferredClone did it
    //Sqlite::initialize();
}

session::~session()
{
    close();
}

Error session::clone()
{
    if (m_connection)
        Throw(Error().fail(__FILE__, __LINE__));    // already open

    return open(m_fileName, m_connectString);
}

/*
static int infiniteBusyHandler (void* data, int tries)
{
  boost::this_thread::sleep (boost::posix_time::seconds(1));
  return 1; // try again
}
*/

Error session::open(String fileName, std::string options)
{
    Error err;

    // can't open twice
    if (m_connection)
        Throw(err.fail(__FILE__, __LINE__, Error::fileInUse));

    int mode = 0;
    int flags = 0;
    int timeout = 0;

    std::stringstream ssconn(options);

    while (!err && !ssconn.eof() && ssconn.str().find('=') >= 0)
    {
        std::string key, val;
        std::getline(ssconn, key, '=');
        std::getline(ssconn, val, '|');

        if ("timeout" == key)
        {
            if ("infinite" == val)
            {
                //timeout = -1;
                timeout = 0x7fffffff;
            }
            else
            {
                std::istringstream converter(val);
                converter >> timeout;

                if (timeout < 1)
                    timeout = 1;
            }
        }
        else if ("mode" == key)
        {
            if (!(mode & (SQLITE_OPEN_READONLY | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE)))
            {
                if ("read" == val)
                {
                    mode = SQLITE_OPEN_READONLY;
                }
                else if ("write" == val)
                {
                    mode = SQLITE_OPEN_READWRITE;
                }
                else if ("create" == val)
                {
                    mode = SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;
                }
                else
                {
                    Throw(err.fail(__FILE__, __LINE__, Error::badParameter));
                }
            }
            else
            {
                // duplicate
                Throw(err.fail(__FILE__, __LINE__, Error::badParameter));
            }
        }

        /* Most native SQLite libraries don't have these experimental features.
        */
#if ! VF_USE_NATIVE_SQLITE
        else if ("cache" == key)
        {
            if (!(flags & (SQLITE_OPEN_SHAREDCACHE | SQLITE_OPEN_PRIVATECACHE)))
            {
                if ("shared" == val)
                {
                    flags |= SQLITE_OPEN_SHAREDCACHE;
                }
                else if ("private" == val)
                {
                    flags |= SQLITE_OPEN_PRIVATECACHE;
                }
                else
                {
                    Throw(err.fail(__FILE__, __LINE__, Error::badParameter));
                }
            }
            else
            {
                // duplicate
                Throw(err.fail(__FILE__, __LINE__, Error::badParameter));
            }
        }

#endif
        else if ("threads" == key)
        {
            if (!(flags & (SQLITE_OPEN_NOMUTEX | SQLITE_OPEN_FULLMUTEX)))
            {
                if ("single" == val)
                {
                    flags |= SQLITE_OPEN_FULLMUTEX;
                }
                else if ("multi" == val)
                {
                    flags |= SQLITE_OPEN_NOMUTEX;
                }
                else
                {
                    Throw(err.fail(__FILE__, __LINE__, Error::badParameter));
                }
            }
            else
            {
                // duplicate
                Throw(err.fail(__FILE__, __LINE__, Error::badParameter));
            }
        }
        else
        {
            // unknown option
            Throw(err.fail(__FILE__, __LINE__, Error::badParameter));
        }
    }

    if (!err)
    {
        if (! mode)
            mode = SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;

        flags |= mode;

        err = detail::sqliteError(__FILE__, __LINE__,
                                  sqlite3_open_v2(fileName.toUTF8(), &m_connection, flags, 0));

        if (!err)
        {
            if (timeout > 0)
            {
                err = detail::sqliteError(__FILE__, __LINE__,
                                          sqlite3_busy_timeout(m_connection, timeout));
            }

            /*
            else
            {
              err = detail::sqliteError (__FILE__, __LINE__,
                sqlite3_busy_handler(m_connection, infiniteBusyHandler, 0));
            }
            */
        }

        if (!err)
        {
            m_fileName = fileName;
            m_connectString = options;
        }

        if (err)
        {
            close();
        }
    }

    return err;
}

void session::close()
{
    if (m_connection)
    {
        sqlite3_close(m_connection);
        m_connection = 0;
        m_fileName = String::empty;
        m_connectString = "";
    }
}

void session::begin()
{
    bassert(!m_bInTransaction);
    m_bInTransaction = true;

    //Error error = hard_exec("BEGIN EXCLUSIVE");
    Error error = hard_exec("BEGIN");

    if (error)
        Throw(error);
}

Error session::commit()
{
    bassert(m_bInTransaction);
    m_bInTransaction = false;
    return hard_exec("COMMIT");
}

void session::rollback()
{
    bassert(m_bInTransaction);
    m_bInTransaction = false;
    Error error = hard_exec("ROLLBACK");

    if (error)
        Throw(error);
}

detail::once_type session::once(Error& error)
{
    return detail::once_type(this, error);
}

rowid session::last_insert_rowid()
{
    return sqlite3_last_insert_rowid(m_connection);
}

std::ostringstream& session::get_query_stream()
{
    return m_query_stream;
}

void session::log_query(std::string const& query)
{
    // TODO
}

void session::set_got_data(bool bGotData)
{
    m_bGotData = bGotData;
}

bool session::got_data() const
{
    return m_bGotData;
}

Error session::hard_exec(std::string const& query)
{
    Error error;
    sqlite3_stmt* stmt;
    char const* tail = 0;

    int result = sqlite3_prepare_v2(
                     m_connection,
                     query.c_str(),
                     static_cast<int>(query.size()),
                     &stmt,
                     &tail);

    if (result == SQLITE_OK)
    {
        result = sqlite3_step(stmt);

        sqlite3_finalize(stmt);
    }

    if (result != SQLITE_DONE)
        error = detail::sqliteError(__FILE__, __LINE__, result);

    return error;
}

}

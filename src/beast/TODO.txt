* Add writer::prepare(msg&) interface to set Content-Type

General:
* Use SFINAE on return values (search for "class =")
* Remove http,websocket error_code types and use the one in <beast/error.hpp>

Boost.Http
* Use enum instead of bool in isRequest
* move version to a subclass of message

Docs:
* Include Example program listings in the docs
* Fix index in docs
* Figure out why namespace rfc2616 is included in docs
  (currently disabled via GENERATING_DOCS macro)
* melpon sandbox?
* Check DOXYGEN, GENERATIC_DOCS directives in source
  - See if we can include them now that xsl is fixed
* Implement cleanup-param to remove spaces around template arguments
  e.g. in basic_streambuf move constructor members
* Don't put using namespace at file scope in examples,
  do something like "using ba = boost::asio" instead.

Core:
* Replace Jamroot with Jamfile
* Fix bidirectional buffers iterators operator->()
* Complete allocator testing in basic_streambuf

WebSocket:
* optimized versions of key/masking, choose prepared_key size
* invokable unit test
* Don't try to read requests into empty_body


HTTP:
* Define Parser concept in HTTP
  - Need parse version of read() so caller can set parser options
    like maximum size of headers, maximum body size, etc
* trim public interface of rfc2616.h to essentials only
* add bool should_close(message_v1 const&) to replace the use
  of eof return value from write and async_write
* http type_check, e.g. is_WritableBody
* More fine grained parser errors
* HTTP parser size limit with test (configurable?)
* HTTP parser trailers with test
* URL parser, strong URL character checking in HTTP parser
* Update for rfc7230
* Consider rename to MessageBody concept
* Fix prepare() calling content_length() without init()
* Use construct,destroy allocator routines in basic_headers
* Complete allocator testing in basic_streambuf, basic_headers
* Fix http::async_write op, case 3 should break at the end.
* Add tests for writer using the resume function / coros
* Custom HTTP error codes for various situations
* Make empty_body write-only, remove reader nested type
* Add concepts WritableBody ReadableBody with type checks,
  check them in read and write functions

#!/usr/bin/env zsh

while getopts ":p:o:" opt; do
    case $opt in
        # pids is an array
        p) pids=(${OPTARG})
           ;;
        o) out=${OPTARG}
           ;;
        \?)
           ;;
    esac
done

if [[ -z $pid ]]; then
    # pid is an array
    pids=($(pidof rippled))
fi

if [[ -z $out ]]; then
    echo "Must specify output file"
    exit 1
fi

get_config(){
    # param is the process id
    for i in $(cat /proc/${1}/cmdline | tr '\0' '\n'); do
        if [[ $i == *.cfg ]]; then
            echo $i
            return 0
        fi
    done

    echo "Could not parse config file. Exiting" >&2
    exit 1
}

page_size=$(getconf -a | grep PAGE_SIZE | awk '{print $2}')

echo > ${out}
echo >> ${out}
echo "Page size: " ${page_size} >> ${out}

for pid in $pids[@]; do
    printf "%-7d %s\n" ${pid} $(get_config ${pid}) >> ${out}
    cmdline=$(tr '\0' ' ' < "/proc/${pid}/cmdline")
    printf "%-7d %s\n" ${pid} ${cmdline} >> ${out}
    exe=$(ls -l /proc/${pid}/exe)
    printf "%-7d %s\n\n" ${pid} ${exe} >> ${out}
done

echo "\npid time res_gb inner_node_counts treenode_cache_size" >> ${out}
while true; do
    for pid in $pids[@]; do
        if [[ ! -f /proc/${pid}/statm ]]; then
            exit 1
        fi
        config=$(get_config ${pid})
        # Set the vars in the to_set collection to each line returned by the command in turn.
        to_set=(innerCount cacheSize)
        for i in $(/proc/${pid}/exe --conf ${config} -- get_counts 2>/dev/null \
            | jq '.result | ."ripple::SHAMapInnerNode",.treenode_cache_size'); do
            eval $to_set[1]=$i
            shift to_set
        done

        pages=$(cat /proc/${pid}/statm | awk '{print $2}')
        gig=1073741824.0
        printf "%-7d %11s %8.3f %-.9d %-.9d\n" ${pid} $(date "+%s") $((pages*page_size/gig)) ${innerCount} ${cacheSize} >> ${out}
        echo $(tail -1 ${out})
    done
    sleep 30
done

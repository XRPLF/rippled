<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2709px" preserveAspectRatio="none" style="width:3403px;height:2709px;" version="1.1" viewBox="0 0 3403 2709" width="3403px" zoomAndPan="magnify"><defs><filter height="300%" id="fwcdvb71f41pp" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacingAndGlyphs" textLength="251" x="1579" y="16.708">Class Diagram for nodestore</text><!--class C_0000855875579524244872--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="112.0234" id="C_0000855875579524244872" style="stroke: #A80036; stroke-width: 1.5;" width="147" x="3033.5" y="2586.9531"/><ellipse cx="3054.35" cy="2602.9531" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3058.4594,2608.9531 L3050.7406,2608.9531 L3050.7406,2596.5625 L3058.4594,2596.5625 L3058.4594,2598.7188 L3053.1938,2598.7188 L3053.1938,2601.3906 L3057.9594,2601.3906 L3057.9594,2603.5469 L3053.1938,2603.5469 L3053.1938,2606.7969 L3058.4594,2606.7969 L3058.4594,2608.9531 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="102" x="3069.65" y="2607.1074">NodeObjectType</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3034.5" x2="3179.5" y1="2618.9531" y2="2618.9531"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="3039.5" y="2633.1636">hotUNKNOWN</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="3039.5" y="2645.9683">hotLEDGER</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3039.5" y="2658.7729">hotACCOUNT_NODE</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3039.5" y="2671.5776">hotTRANSACTION_NODE</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="3039.5" y="2684.3823">hotDUMMY</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3034.5" x2="3179.5" y1="2690.9766" y2="2690.9766"/><!--class C_0000434356742846908842--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="48" id="C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.5;" width="121" x="355.5" y="2618.9531"/><ellipse cx="370.5" cy="2634.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M373.4688,2640.5938 Q372.8906,2640.8906 372.25,2641.0313 Q371.6094,2641.1875 370.9063,2641.1875 Q368.4063,2641.1875 367.0781,2639.5469 Q365.7656,2637.8906 365.7656,2634.7656 Q365.7656,2631.6406 367.0781,2629.9844 Q368.4063,2628.3281 370.9063,2628.3281 Q371.6094,2628.3281 372.25,2628.4844 Q372.9063,2628.6406 373.4688,2628.9375 L373.4688,2631.6563 Q372.8438,2631.0781 372.25,2630.8125 Q371.6563,2630.5313 371.0313,2630.5313 Q369.6875,2630.5313 369,2631.6094 Q368.3125,2632.6719 368.3125,2634.7656 Q368.3125,2636.8594 369,2637.9375 Q369.6875,2639 371.0313,2639 Q371.6563,2639 372.25,2638.7344 Q372.8438,2638.4531 373.4688,2637.875 L373.4688,2640.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="384.5" y="2639.1074">base_uint</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="26" x="453.5" y="2615.9531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="24" x="454.5" y="2628.0918">256</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="356.5" x2="475.5" y1="2650.9531" y2="2650.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="356.5" x2="475.5" y1="2658.9531" y2="2658.9531"/><!--class C_0000259095379643657367--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="124.8281" id="C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.5;" width="289" x="1741.5" y="2384.9531"/><ellipse cx="1845.25" cy="2400.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1848.2188,2406.5938 Q1847.6406,2406.8906 1847,2407.0313 Q1846.3594,2407.1875 1845.6563,2407.1875 Q1843.1563,2407.1875 1841.8281,2405.5469 Q1840.5156,2403.8906 1840.5156,2400.7656 Q1840.5156,2397.6406 1841.8281,2395.9844 Q1843.1563,2394.3281 1845.6563,2394.3281 Q1846.3594,2394.3281 1847,2394.4844 Q1847.6563,2394.6406 1848.2188,2394.9375 L1848.2188,2397.6563 Q1847.5938,2397.0781 1847,2396.8125 Q1846.4063,2396.5313 1845.7813,2396.5313 Q1844.4375,2396.5313 1843.75,2397.6094 Q1843.0625,2398.6719 1843.0625,2400.7656 Q1843.0625,2402.8594 1843.75,2403.9375 Q1844.4375,2405 1845.7813,2405 Q1846.4063,2405 1847,2404.7344 Q1847.5938,2404.4531 1848.2188,2403.875 L1848.2188,2406.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="1865.75" y="2405.1074">NodeObject</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1742.5" x2="2029.5" y1="2416.9531" y2="2416.9531"/><ellipse cx="1752.5" cy="2428.8555" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="156" x="1761.5" y="2431.1636">keyBytes : const std::size_t</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1761.5" x2="1917.5" y1="2433.1636" y2="2433.1636"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1742.5" x2="2029.5" y1="2437.7578" y2="2437.7578"/><ellipse cx="1752.5" cy="2449.6602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="1761.5" y="2451.9683">NodeObject() : void</text><ellipse cx="1752.5" cy="2462.4648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="263" x="1761.5" y="2464.7729">createObject() : std::shared_ptr&lt;NodeObject&gt;</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1761.5" x2="2024.5" y1="2466.7729" y2="2466.7729"/><ellipse cx="1752.5" cy="2475.2695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1761.5" y="2477.5776">getType() const : NodeObjectType</text><ellipse cx="1752.5" cy="2488.0742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="1761.5" y="2490.3823">getHash() const : const uint256 &amp;</text><ellipse cx="1752.5" cy="2500.8789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1761.5" y="2503.187">getData() const : const Blob &amp;</text><!--class C_0000536634694005451753--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="60.8047" id="C_0000536634694005451753" style="stroke: #A80036; stroke-width: 1.5;" width="204" x="1667" y="1939.9531"/><ellipse cx="1683.8" cy="1955.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1686.7688,1961.5938 Q1686.1906,1961.8906 1685.55,1962.0313 Q1684.9094,1962.1875 1684.2063,1962.1875 Q1681.7063,1962.1875 1680.3781,1960.5469 Q1679.0656,1958.8906 1679.0656,1955.7656 Q1679.0656,1952.6406 1680.3781,1950.9844 Q1681.7063,1949.3281 1684.2063,1949.3281 Q1684.9094,1949.3281 1685.55,1949.4844 Q1686.2063,1949.6406 1686.7688,1949.9375 L1686.7688,1952.6563 Q1686.1438,1952.0781 1685.55,1951.8125 Q1684.9563,1951.5313 1684.3313,1951.5313 Q1682.9875,1951.5313 1682.3,1952.6094 Q1681.6125,1953.6719 1681.6125,1955.7656 Q1681.6125,1957.8594 1682.3,1958.9375 Q1682.9875,1960 1684.3313,1960 Q1684.9563,1960 1685.55,1959.7344 Q1686.1438,1959.4531 1686.7688,1958.875 L1686.7688,1961.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="168" x="1698.2" y="1960.1074">NodeObject::PrivateAccess</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1668" x2="1870" y1="1971.9531" y2="1971.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1668" x2="1870" y1="1979.9531" y2="1979.9531"/><ellipse cx="1678" cy="1991.8555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="1687" y="1994.1636">PrivateAccess() = default : void</text><!--class C_0002214970677431989731--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="265.6797" id="C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.5;" width="487" x="1144.5" y="1837.4531"/><ellipse cx="1319.25" cy="1853.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1319.3594,1848.7969 L1318.2031,1853.875 L1320.5313,1853.875 L1319.3594,1848.7969 Z M1317.875,1846.5625 L1320.8594,1846.5625 L1324.2188,1858.9531 L1321.7656,1858.9531 L1321,1855.8906 L1317.7188,1855.8906 L1316.9688,1858.9531 L1314.5313,1858.9531 L1317.875,1846.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="129" x="1339.75" y="1857.6074">NodeStore::Backend</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1145.5" x2="1630.5" y1="1869.4531" y2="1869.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1145.5" x2="1630.5" y1="1877.4531" y2="1877.4531"/><ellipse cx="1155.5" cy="1889.3555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="1164.5" y="1891.6636">~Backend() = default : void</text><ellipse cx="1155.5" cy="1902.1602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="1164.5" y="1904.4683">getName() = 0 : std::string</text><ellipse cx="1155.5" cy="1914.9648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="95" x="1164.5" y="1917.2729">open() = 0 : void</text><ellipse cx="1155.5" cy="1927.7695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="108" x="1164.5" y="1930.0776">isOpen() = 0 : bool</text><ellipse cx="1155.5" cy="1940.5742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1164.5" y="1942.8823">open() : void</text><ellipse cx="1155.5" cy="1953.3789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="97" x="1164.5" y="1955.687">close() = 0 : void</text><ellipse cx="1155.5" cy="1966.1836" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="177" x="1164.5" y="1968.4917">fetch() = 0 : NodeStore::Status</text><ellipse cx="1155.5" cy="1978.9883" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="461" x="1164.5" y="1981.2964">fetchBatch() = 0 : std::pair&lt;std::vector&lt;std::shared_ptr&lt;NodeObject&gt;&gt;,Status&gt;</text><ellipse cx="1155.5" cy="1991.793" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="97" x="1164.5" y="1994.1011">store() = 0 : void</text><ellipse cx="1155.5" cy="2004.5977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="129" x="1164.5" y="2006.9058">storeBatch() = 0 : void</text><ellipse cx="1155.5" cy="2017.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="93" x="1164.5" y="2019.7104">sync() = 0 : void</text><ellipse cx="1155.5" cy="2030.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="116" x="1164.5" y="2032.5151">for_each() = 0 : void</text><ellipse cx="1155.5" cy="2043.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="131" x="1164.5" y="2045.3198">getWriteLoad() = 0 : int</text><ellipse cx="1155.5" cy="2055.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146" x="1164.5" y="2058.1245">setDeletePath() = 0 : void</text><ellipse cx="1155.5" cy="2068.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="1164.5" y="2070.9292">verify() : void</text><ellipse cx="1155.5" cy="2081.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="1164.5" y="2083.7339">fdRequired() const = 0 : int</text><ellipse cx="1155.5" cy="2094.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="335" x="1164.5" y="2096.5386">counters() const : std::optional&lt;Counters&lt;std::uint64_t&gt;&gt;</text><!--class C_0002069443800464145931--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="572.9922" id="C_0002069443800464145931" style="stroke: #A80036; stroke-width: 1.5;" width="310" x="799" y="665.9531"/><ellipse cx="881.75" cy="681.9531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M881.8594,677.2969 L880.7031,682.375 L883.0313,682.375 L881.8594,677.2969 Z M880.375,675.0625 L883.3594,675.0625 L886.7188,687.4531 L884.2656,687.4531 L883.5,684.3906 L880.2188,684.3906 L879.4688,687.4531 L877.0313,687.4531 L880.375,675.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="136" x="902.25" y="686.1074">NodeStore::Database</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="800" x2="1108" y1="697.9531" y2="697.9531"/><polygon fill="none" points="810,704.8555,814,708.8555,810,712.8555,806,708.8555" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="819" y="712.1636">j_ : const beast::Journal</text><polygon fill="none" points="810,717.6602,814,721.6602,810,725.6602,806,721.6602" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="819" y="724.9683">fdRequired_ : int</text><polygon fill="none" points="810,730.4648,814,734.4648,810,738.4648,806,734.4648" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="819" y="737.7729">fetchHitCount_ : std::atomic&lt;std::uint32_t&gt;</text><polygon fill="none" points="810,743.2695,814,747.2695,810,751.2695,806,747.2695" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="819" y="750.5776">fetchSz_ : std::atomic&lt;std::uint32_t&gt;</text><polygon fill="none" points="810,756.0742,814,760.0742,810,764.0742,806,760.0742" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="819" y="763.3823">ledgersPerShard_ : const std::uint32_t</text><polygon fill="none" points="810,768.8789,814,772.8789,810,776.8789,806,772.8789" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="819" y="776.187">earliestLedgerSeq_ : const std::uint32_t</text><polygon fill="none" points="810,781.6836,814,785.6836,810,789.6836,806,785.6836" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="819" y="788.9917">earliestShardIndex_ : const std::uint32_t</text><polygon fill="none" points="810,794.4883,814,798.4883,810,802.4883,806,798.4883" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="819" y="801.7964">requestBundle_ : const int</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="800" x2="1108" y1="808.3906" y2="808.3906"/><ellipse cx="810" cy="820.293" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="819" y="822.6011">Database() : void</text><ellipse cx="810" cy="833.0977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="819" y="835.4058">Database() : void</text><ellipse cx="810" cy="845.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="819" y="848.2104">~Database() : void</text><ellipse cx="810" cy="858.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="189" x="819" y="861.0151">getName() const = 0 : std::string</text><ellipse cx="810" cy="871.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="819" y="873.8198">importDatabase() = 0 : void</text><ellipse cx="810" cy="884.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="216" x="819" y="886.6245">getWriteLoad() const = 0 : std::int32_t</text><ellipse cx="810" cy="897.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="97" x="819" y="899.4292">store() = 0 : void</text><ellipse cx="810" cy="909.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="127" x="819" y="912.2339">isSameDB() = 0 : bool</text><ellipse cx="810" cy="922.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="93" x="819" y="925.0386">sync() = 0 : void</text><ellipse cx="810" cy="935.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="819" y="937.8433">fetchNodeObject() : std::shared_ptr&lt;NodeObject&gt;</text><ellipse cx="810" cy="948.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="819" y="950.6479">asyncFetch() : void</text><ellipse cx="810" cy="961.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="819" y="963.4526">storeLedger() = 0 : bool</text><ellipse cx="810" cy="973.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="104" x="819" y="976.2573">sweep() = 0 : void</text><ellipse cx="810" cy="986.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="819" y="989.062">getStoreCount() const : std::uint64_t</text><ellipse cx="810" cy="999.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="819" y="1001.8667">getFetchTotalCount() const : std::uint32_t</text><ellipse cx="810" cy="1012.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="819" y="1014.6714">getFetchHitCount() const : std::uint32_t</text><ellipse cx="810" cy="1025.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="819" y="1027.4761">getStoreSize() const : std::uint64_t</text><ellipse cx="810" cy="1037.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="819" y="1040.2808">getFetchSize() const : std::uint32_t</text><ellipse cx="810" cy="1050.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="819" y="1053.0854">getCountsJson() : void</text><ellipse cx="810" cy="1063.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="819" y="1065.8901">fdRequired() const : int</text><ellipse cx="810" cy="1076.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="819" y="1078.6948">stop() : void</text><ellipse cx="810" cy="1089.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="819" y="1091.4995">isStopping() const : bool</text><ellipse cx="810" cy="1101.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="819" y="1104.3042">ledgersPerShard() const : std::uint32_t</text><ellipse cx="810" cy="1114.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="819" y="1117.1089">earliestLedgerSeq() const : std::uint32_t</text><ellipse cx="810" cy="1127.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="819" y="1129.9136">earliestShardIndex() const : std::uint32_t</text><ellipse cx="810" cy="1140.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="819" y="1142.7183">firstLedgerSeq() const : std::uint32_t</text><ellipse cx="810" cy="1153.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="819" y="1155.5229">lastLedgerSeq() const : std::uint32_t</text><ellipse cx="810" cy="1166.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="819" y="1168.3276">seqToShardIndex() const : std::uint32_t</text><ellipse cx="810" cy="1178.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="819" y="1181.1323">maxLedgers() const : std::uint32_t</text><polygon fill="#FFFF44" points="810,1186.6289,814,1190.6289,810,1194.6289,806,1190.6289" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="819" y="1193.937">storeStats() : void</text><polygon fill="#FFFF44" points="810,1199.4336,814,1203.4336,810,1207.4336,806,1203.4336" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="819" y="1206.7417">importInternal() : void</text><polygon fill="#FFFF44" points="810,1212.2383,814,1216.2383,810,1220.2383,806,1216.2383" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="819" y="1219.5464">storeLedger() : bool</text><polygon fill="#FFFF44" points="810,1225.043,814,1229.043,810,1233.043,806,1229.043" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="819" y="1232.3511">updateFetchMetrics() : void</text><!--class C_0001089131121863903009--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="240.0703" id="C_0001089131121863903009" style="stroke: #A80036; stroke-width: 1.5;" width="356" x="776" y="1315.9531"/><ellipse cx="854.25" cy="1331.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M857.2188,1337.5938 Q856.6406,1337.8906 856,1338.0313 Q855.3594,1338.1875 854.6563,1338.1875 Q852.1563,1338.1875 850.8281,1336.5469 Q849.5156,1334.8906 849.5156,1331.7656 Q849.5156,1328.6406 850.8281,1326.9844 Q852.1563,1325.3281 854.6563,1325.3281 Q855.3594,1325.3281 856,1325.4844 Q856.6563,1325.6406 857.2188,1325.9375 L857.2188,1328.6563 Q856.5938,1328.0781 856,1327.8125 Q855.4063,1327.5313 854.7813,1327.5313 Q853.4375,1327.5313 852.75,1328.6094 Q852.0625,1329.6719 852.0625,1331.7656 Q852.0625,1333.8594 852.75,1334.9375 Q853.4375,1336 854.7813,1336 Q855.4063,1336 856,1335.7344 Q856.5938,1335.4531 857.2188,1334.875 L857.2188,1337.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="191" x="874.75" y="1336.1074">NodeStore::DatabaseNodeImp</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="777" x2="1131" y1="1347.9531" y2="1347.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="777" x2="1131" y1="1355.9531" y2="1355.9531"/><ellipse cx="787" cy="1367.8555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="796" y="1370.1636">DatabaseNodeImp() : void</text><ellipse cx="787" cy="1380.6602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="796" y="1382.9683">DatabaseNodeImp() : void</text><ellipse cx="787" cy="1393.4648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="796" y="1395.7729">operator=() : NodeStore::DatabaseNodeImp &amp;</text><ellipse cx="787" cy="1406.2695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="796" y="1408.5776">DatabaseNodeImp() : void</text><ellipse cx="787" cy="1419.0742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="796" y="1421.3823">~DatabaseNodeImp() : void</text><ellipse cx="787" cy="1431.8789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="796" y="1434.187">getName() const : std::string</text><ellipse cx="787" cy="1444.6836" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="796" y="1446.9917">getWriteLoad() const : std::int32_t</text><ellipse cx="787" cy="1457.4883" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="796" y="1459.7964">importDatabase() : void</text><ellipse cx="787" cy="1470.293" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="796" y="1472.6011">store() : void</text><ellipse cx="787" cy="1483.0977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="796" y="1485.4058">isSameDB() : bool</text><ellipse cx="787" cy="1495.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="796" y="1498.2104">sync() : void</text><ellipse cx="787" cy="1508.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="796" y="1511.0151">fetchBatch() : std::vector&lt;std::shared_ptr&lt;NodeObject&gt;&gt;</text><ellipse cx="787" cy="1521.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="796" y="1523.8198">asyncFetch() : void</text><ellipse cx="787" cy="1534.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="796" y="1536.6245">storeLedger() : bool</text><ellipse cx="787" cy="1547.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="796" y="1549.4292">sweep() : void</text><!--class C_0000240241992813306142--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="99.2188" id="C_0000240241992813306142" style="stroke: #A80036; stroke-width: 1.5;" width="296" x="2323" y="1386.4531"/><ellipse cx="2369.75" cy="1402.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2372.7188,1408.0938 Q2372.1406,1408.3906 2371.5,1408.5313 Q2370.8594,1408.6875 2370.1563,1408.6875 Q2367.6563,1408.6875 2366.3281,1407.0469 Q2365.0156,1405.3906 2365.0156,1402.2656 Q2365.0156,1399.1406 2366.3281,1397.4844 Q2367.6563,1395.8281 2370.1563,1395.8281 Q2370.8594,1395.8281 2371.5,1395.9844 Q2372.1563,1396.1406 2372.7188,1396.4375 L2372.7188,1399.1563 Q2372.0938,1398.5781 2371.5,1398.3125 Q2370.9063,1398.0313 2370.2813,1398.0313 Q2368.9375,1398.0313 2368.25,1399.1094 Q2367.5625,1400.1719 2367.5625,1402.2656 Q2367.5625,1404.3594 2368.25,1405.4375 Q2368.9375,1406.5 2370.2813,1406.5 Q2370.9063,1406.5 2371.5,1406.2344 Q2372.0938,1405.9531 2372.7188,1405.375 L2372.7188,1408.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="194" x="2390.25" y="1406.6074">NodeStore::DeterministicShard</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2324" x2="2618" y1="1418.4531" y2="1418.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2324" x2="2618" y1="1426.4531" y2="1426.4531"/><ellipse cx="2334" cy="1438.3555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2343" y="1440.6636">~DeterministicShard() : void</text><ellipse cx="2334" cy="1451.1602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="2343" y="1453.4683">close() : void</text><ellipse cx="2334" cy="1463.9648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="2343" y="1466.2729">getDir() const : const boost::filesystem::path &amp;</text><ellipse cx="2334" cy="1476.7695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2343" y="1479.0776">store() : bool</text><!--class C_0001343369207418016912--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="457.75" id="C_0001343369207418016912" style="stroke: #A80036; stroke-width: 1.5;" width="357" x="2564.5" y="723.4531"/><ellipse cx="2682.75" cy="739.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2685.7188,745.0938 Q2685.1406,745.3906 2684.5,745.5313 Q2683.8594,745.6875 2683.1563,745.6875 Q2680.6563,745.6875 2679.3281,744.0469 Q2678.0156,742.3906 2678.0156,739.2656 Q2678.0156,736.1406 2679.3281,734.4844 Q2680.6563,732.8281 2683.1563,732.8281 Q2683.8594,732.8281 2684.5,732.9844 Q2685.1563,733.1406 2685.7188,733.4375 L2685.7188,736.1563 Q2685.0938,735.5781 2684.5,735.3125 Q2683.9063,735.0313 2683.2813,735.0313 Q2681.9375,735.0313 2681.25,736.1094 Q2680.5625,737.1719 2680.5625,739.2656 Q2680.5625,741.3594 2681.25,742.4375 Q2681.9375,743.5 2683.2813,743.5 Q2683.9063,743.5 2684.5,743.2344 Q2685.0938,742.9531 2685.7188,742.375 L2685.7188,745.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="112" x="2703.25" y="743.6074">NodeStore::Shard</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2565.5" x2="2920.5" y1="755.4531" y2="755.4531"/><ellipse cx="2575.5" cy="767.3555" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="160" x="2584.5" y="769.6636">version : const std::uint32_t</text><line style="stroke: #000000; stroke-width: 1.0;" x1="2584.5" x2="2744.5" y1="771.6636" y2="771.6636"/><ellipse cx="2575.5" cy="780.1602" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="133" x="2584.5" y="782.4683">finalKey : const uint256</text><line style="stroke: #000000; stroke-width: 1.0;" x1="2584.5" x2="2717.5" y1="784.4683" y2="784.4683"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2565.5" x2="2920.5" y1="789.0625" y2="789.0625"/><ellipse cx="2575.5" cy="800.9648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="2584.5" y="803.2729">Shard() : void</text><ellipse cx="2575.5" cy="813.7695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="2584.5" y="816.0776">Shard() : void</text><ellipse cx="2575.5" cy="826.5742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="2584.5" y="828.8823">operator=() : NodeStore::Shard &amp;</text><ellipse cx="2575.5" cy="839.3789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="2584.5" y="841.687">operator=() : NodeStore::Shard &amp;</text><ellipse cx="2575.5" cy="852.1836" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="2584.5" y="854.4917">Shard() : void</text><ellipse cx="2575.5" cy="864.9883" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="2584.5" y="867.2964">Shard() : void</text><ellipse cx="2575.5" cy="877.793" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2584.5" y="880.1011">~Shard() : void</text><ellipse cx="2575.5" cy="890.5977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="2584.5" y="892.9058">init() : bool</text><ellipse cx="2575.5" cy="903.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="2584.5" y="905.7104">isOpen() const : bool</text><ellipse cx="2575.5" cy="916.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="2584.5" y="918.5151">tryClose() : bool</text><ellipse cx="2575.5" cy="929.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2584.5" y="931.3198">stop() : void</text><ellipse cx="2575.5" cy="941.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="2584.5" y="944.1245">prepare() : std::optional&lt;std::uint32_t&gt;</text><ellipse cx="2575.5" cy="954.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2584.5" y="956.9292">storeNodeObject() : bool</text><ellipse cx="2575.5" cy="967.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="2584.5" y="969.7339">fetchNodeObject() : std::shared_ptr&lt;NodeObject&gt;</text><ellipse cx="2575.5" cy="980.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="2584.5" y="982.5386">storeLedger() : NodeStore::Shard::StoreLedgerResult</text><ellipse cx="2575.5" cy="993.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2584.5" y="995.3433">setLedgerStored() : bool</text><ellipse cx="2575.5" cy="1005.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="2584.5" y="1008.1479">containsLedger() const : bool</text><ellipse cx="2575.5" cy="1018.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2584.5" y="1020.9526">index() const : std::uint32_t</text><ellipse cx="2575.5" cy="1031.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="2584.5" y="1033.7573">getDir() const : const boost::filesystem::path &amp;</text><ellipse cx="2575.5" cy="1044.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="2584.5" y="1046.562">getLastUse() const : std::chrono::steady_clock::time_point</text><ellipse cx="2575.5" cy="1057.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="2584.5" y="1059.3667">getFileInfo() const : std::pair&lt;std::uint64_t,std::uint32_t&gt;</text><ellipse cx="2575.5" cy="1069.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2584.5" y="1072.1714">getState() const : ShardState</text><ellipse cx="2575.5" cy="1082.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2584.5" y="1084.9761">getPercentProgress() const : std::uint32_t</text><ellipse cx="2575.5" cy="1095.4727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="2584.5" y="1097.7808">getWriteLoad() : std::int32_t</text><ellipse cx="2575.5" cy="1108.2773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="2584.5" y="1110.5854">isLegacy() const : bool</text><ellipse cx="2575.5" cy="1121.082" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2584.5" y="1123.3901">finalize() : bool</text><ellipse cx="2575.5" cy="1133.8867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="2584.5" y="1136.1948">removeOnDestroy() : void</text><ellipse cx="2575.5" cy="1146.6914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="2584.5" y="1148.9995">getStoredSeqs() : std::string</text><ellipse cx="2575.5" cy="1159.4961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2584.5" y="1161.8042">callForLedgerSQL() : _Bool</text><ellipse cx="2575.5" cy="1172.3008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2584.5" y="1174.6089">callForTransactionSQL() : _Bool</text><!--class C_0000286650811473765618--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="99.2188" id="C_0000286650811473765618" style="stroke: #A80036; stroke-width: 1.5;" width="180" x="2206" y="1920.9531"/><ellipse cx="2221" cy="1936.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2223.9688,1942.5938 Q2223.3906,1942.8906 2222.75,1943.0313 Q2222.1094,1943.1875 2221.4063,1943.1875 Q2218.9063,1943.1875 2217.5781,1941.5469 Q2216.2656,1939.8906 2216.2656,1936.7656 Q2216.2656,1933.6406 2217.5781,1931.9844 Q2218.9063,1930.3281 2221.4063,1930.3281 Q2222.1094,1930.3281 2222.75,1930.4844 Q2223.4063,1930.6406 2223.9688,1930.9375 L2223.9688,1933.6563 Q2223.3438,1933.0781 2222.75,1932.8125 Q2222.1563,1932.5313 2221.5313,1932.5313 Q2220.1875,1932.5313 2219.5,1933.6094 Q2218.8125,1934.6719 2218.8125,1936.7656 Q2218.8125,1938.8594 2219.5,1939.9375 Q2220.1875,1941 2221.5313,1941 Q2222.1563,1941 2222.75,1940.7344 Q2223.3438,1940.4531 2223.9688,1939.875 L2223.9688,1942.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="148" x="2235" y="1941.1074">NodeStore::BatchWriter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2207" x2="2385" y1="1952.9531" y2="1952.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2207" x2="2385" y1="1960.9531" y2="1960.9531"/><ellipse cx="2217" cy="1972.8555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="2226" y="1975.1636">BatchWriter() : void</text><ellipse cx="2217" cy="1985.6602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="2226" y="1987.9683">~BatchWriter() : void</text><ellipse cx="2217" cy="1998.4648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="2226" y="2000.7729">store() : void</text><ellipse cx="2217" cy="2011.2695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="2226" y="2013.5776">getWriteLoad() : int</text><!--class C_0000948563456986781213--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="112.0234" id="C_0000948563456986781213" style="stroke: #A80036; stroke-width: 1.5;" width="306" x="1982" y="1379.9531"/><ellipse cx="2026.75" cy="1395.9531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2026.8594,1391.2969 L2025.7031,1396.375 L2028.0313,1396.375 L2026.8594,1391.2969 Z M2025.375,1389.0625 L2028.3594,1389.0625 L2031.7188,1401.4531 L2029.2656,1401.4531 L2028.5,1398.3906 L2025.2188,1398.3906 L2024.4688,1401.4531 L2022.0313,1401.4531 L2025.375,1389.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="208" x="2047.25" y="1400.1074">NodeStore::BatchWriter::Callback</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1983" x2="2287" y1="1411.9531" y2="1411.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1983" x2="2287" y1="1419.9531" y2="1419.9531"/><ellipse cx="1993" cy="1431.8555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="2002" y="1434.1636">~Callback() = default : void</text><ellipse cx="1993" cy="1444.6602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="2002" y="1446.9683">Callback() = default : void</text><ellipse cx="1993" cy="1457.4648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="2002" y="1459.7729">Callback() : void</text><ellipse cx="1993" cy="1470.2695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="2002" y="1472.5776">operator=() : NodeStore::BatchWriter::Callback &amp;</text><ellipse cx="1993" cy="1483.0742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="127" x="2002" y="1485.3823">writeBatch() = 0 : void</text><!--class C_0000312573841898533211--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="99.2188" id="C_0000312573841898533211" style="stroke: #A80036; stroke-width: 1.5;" width="193" x="1906.5" y="1920.9531"/><ellipse cx="1923.3" cy="1936.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1926.2688,1942.5938 Q1925.6906,1942.8906 1925.05,1943.0313 Q1924.4094,1943.1875 1923.7063,1943.1875 Q1921.2063,1943.1875 1919.8781,1941.5469 Q1918.5656,1939.8906 1918.5656,1936.7656 Q1918.5656,1933.6406 1919.8781,1931.9844 Q1921.2063,1930.3281 1923.7063,1930.3281 Q1924.4094,1930.3281 1925.05,1930.4844 Q1925.7063,1930.6406 1926.2688,1930.9375 L1926.2688,1933.6563 Q1925.6438,1933.0781 1925.05,1932.8125 Q1924.4563,1932.5313 1923.8313,1932.5313 Q1922.4875,1932.5313 1921.8,1933.6094 Q1921.1125,1934.6719 1921.1125,1936.7656 Q1921.1125,1938.8594 1921.8,1939.9375 Q1922.4875,1941 1923.8313,1941 Q1924.4563,1941 1925.05,1940.7344 Q1925.6438,1940.4531 1926.2688,1939.875 L1926.2688,1942.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="157" x="1937.7" y="1941.1074">NodeStore::EncodedBlob</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1907.5" x2="2098.5" y1="1952.9531" y2="1952.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1907.5" x2="2098.5" y1="1960.9531" y2="1960.9531"/><ellipse cx="1917.5" cy="1972.8555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1926.5" y="1975.1636">prepare() : void</text><ellipse cx="1917.5" cy="1985.6602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1926.5" y="1987.9683">getKey() const : const void *</text><ellipse cx="1917.5" cy="1998.4648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="1926.5" y="2000.7729">getSize() const : std::size_t</text><ellipse cx="1917.5" cy="2011.2695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1926.5" y="2013.5776">getData() const : const void *</text><!--class C_0002032177822726797791--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="227.2656" id="C_0002032177822726797791" style="stroke: #A80036; stroke-width: 1.5;" width="307" x="1089.5" y="195.4531"/><ellipse cx="1133.3" cy="211.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1136.2688,217.0938 Q1135.6906,217.3906 1135.05,217.5313 Q1134.4094,217.6875 1133.7063,217.6875 Q1131.2063,217.6875 1129.8781,216.0469 Q1128.5656,214.3906 1128.5656,211.2656 Q1128.5656,208.1406 1129.8781,206.4844 Q1131.2063,204.8281 1133.7063,204.8281 Q1134.4094,204.8281 1135.05,204.9844 Q1135.7063,205.1406 1136.2688,205.4375 L1136.2688,208.1563 Q1135.6438,207.5781 1135.05,207.3125 Q1134.4563,207.0313 1133.8313,207.0313 Q1132.4875,207.0313 1131.8,208.1094 Q1131.1125,209.1719 1131.1125,211.2656 Q1131.1125,213.3594 1131.8,214.4375 Q1132.4875,215.5 1133.8313,215.5 Q1134.4563,215.5 1135.05,215.2344 Q1135.6438,214.9531 1136.2688,214.375 L1136.2688,217.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="211" x="1153.7" y="215.6074">NodeStore::DatabaseRotatingImp</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1090.5" x2="1395.5" y1="227.4531" y2="227.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1090.5" x2="1395.5" y1="235.4531" y2="235.4531"/><ellipse cx="1100.5" cy="247.3555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1109.5" y="249.6636">DatabaseRotatingImp() : void</text><ellipse cx="1100.5" cy="260.1602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1109.5" y="262.4683">DatabaseRotatingImp() : void</text><ellipse cx="1100.5" cy="272.9648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="1109.5" y="275.2729">operator=() : NodeStore::DatabaseRotatingImp &amp;</text><ellipse cx="1100.5" cy="285.7695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1109.5" y="288.0776">DatabaseRotatingImp() : void</text><ellipse cx="1100.5" cy="298.5742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1109.5" y="300.8823">~DatabaseRotatingImp() : void</text><ellipse cx="1100.5" cy="311.3789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1109.5" y="313.687">rotateWithLock() : void</text><ellipse cx="1100.5" cy="324.1836" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1109.5" y="326.4917">getName() const : std::string</text><ellipse cx="1100.5" cy="336.9883" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1109.5" y="339.2964">getWriteLoad() const : std::int32_t</text><ellipse cx="1100.5" cy="349.793" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1109.5" y="352.1011">importDatabase() : void</text><ellipse cx="1100.5" cy="362.5977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1109.5" y="364.9058">isSameDB() : bool</text><ellipse cx="1100.5" cy="375.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1109.5" y="377.7104">store() : void</text><ellipse cx="1100.5" cy="388.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1109.5" y="390.5151">sync() : void</text><ellipse cx="1100.5" cy="401.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1109.5" y="403.3198">storeLedger() : bool</text><ellipse cx="1100.5" cy="413.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="1109.5" y="416.1245">sweep() : void</text><!--class C_0002003532416511686684--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="560.1875" id="C_0002003532416511686684" style="stroke: #A80036; stroke-width: 1.5;" width="406" x="2727" y="28.9531"/><ellipse cx="2828.25" cy="44.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2831.2188,50.5938 Q2830.6406,50.8906 2830,51.0313 Q2829.3594,51.1875 2828.6563,51.1875 Q2826.1563,51.1875 2824.8281,49.5469 Q2823.5156,47.8906 2823.5156,44.7656 Q2823.5156,41.6406 2824.8281,39.9844 Q2826.1563,38.3281 2828.6563,38.3281 Q2829.3594,38.3281 2830,38.4844 Q2830.6563,38.6406 2831.2188,38.9375 L2831.2188,41.6563 Q2830.5938,41.0781 2830,40.8125 Q2829.4063,40.5313 2828.7813,40.5313 Q2827.4375,40.5313 2826.75,41.6094 Q2826.0625,42.6719 2826.0625,44.7656 Q2826.0625,46.8594 2826.75,47.9375 Q2827.4375,49 2828.7813,49 Q2829.4063,49 2830,48.7344 Q2830.5938,48.4531 2831.2188,47.875 L2831.2188,50.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="195" x="2848.75" y="49.1074">NodeStore::DatabaseShardImp</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2728" x2="3132" y1="60.9531" y2="60.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2728" x2="3132" y1="68.9531" y2="68.9531"/><ellipse cx="2738" cy="80.8555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2747" y="83.1636">DatabaseShardImp() : void</text><ellipse cx="2738" cy="93.6602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2747" y="95.9683">DatabaseShardImp() : void</text><ellipse cx="2738" cy="106.4648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2747" y="108.7729">DatabaseShardImp() : void</text><ellipse cx="2738" cy="119.2695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="2747" y="121.5776">operator=() : NodeStore::DatabaseShardImp &amp;</text><ellipse cx="2738" cy="132.0742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="2747" y="134.3823">operator=() : NodeStore::DatabaseShardImp &amp;</text><ellipse cx="2738" cy="144.8789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2747" y="147.187">DatabaseShardImp() : void</text><ellipse cx="2738" cy="157.6836" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2747" y="159.9917">~DatabaseShardImp() : void</text><ellipse cx="2738" cy="170.4883" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="2747" y="172.7964">init() : bool</text><ellipse cx="2738" cy="183.293" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2747" y="185.6011">prepareLedger() : std::optional&lt;std::uint32_t&gt;</text><ellipse cx="2738" cy="196.0977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2747" y="198.4058">prepareShards() : bool</text><ellipse cx="2738" cy="208.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2747" y="211.2104">removePreShard() : void</text><ellipse cx="2738" cy="221.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="2747" y="224.0151">getPreShards() : std::string</text><ellipse cx="2738" cy="234.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2747" y="236.8198">importShard() : bool</text><ellipse cx="2738" cy="247.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="2747" y="249.6245">fetchLedger() : std::shared_ptr&lt;Ledger&gt;</text><ellipse cx="2738" cy="260.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2747" y="262.4292">setStored() : void</text><ellipse cx="2738" cy="272.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="2747" y="275.2339">getShardInfo() const : std::unique_ptr&lt;ShardInfo&gt;</text><ellipse cx="2738" cy="285.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2747" y="288.0386">getNumTasks() const : size_t</text><ellipse cx="2738" cy="298.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="2747" y="300.8433">getRootDir() const : const boost::filesystem::path &amp;</text><ellipse cx="2738" cy="311.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2747" y="313.6479">getName() const : std::string</text><ellipse cx="2738" cy="324.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2747" y="326.4526">stop() : void</text><ellipse cx="2738" cy="336.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="2747" y="339.2573">importDatabase() : void</text><ellipse cx="2738" cy="349.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2747" y="352.062">doImportDatabase() : void</text><ellipse cx="2738" cy="362.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="2747" y="364.8667">getWriteLoad() const : std::int32_t</text><ellipse cx="2738" cy="375.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2747" y="377.6714">isSameDB() : bool</text><ellipse cx="2738" cy="388.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="2747" y="390.4761">store() : void</text><ellipse cx="2738" cy="400.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="2747" y="403.2808">sync() : void</text><ellipse cx="2738" cy="413.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="2747" y="416.0854">storeLedger() : bool</text><ellipse cx="2738" cy="426.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2747" y="428.8901">sweep() : void</text><ellipse cx="2738" cy="439.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2747" y="441.6948">getDatabaseImportStatus() const : Json::Value</text><ellipse cx="2738" cy="452.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="2747" y="454.4995">startNodeToShard() : Json::Value</text><ellipse cx="2738" cy="464.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="2747" y="467.3042">stopNodeToShard() : Json::Value</text><ellipse cx="2738" cy="477.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="2747" y="480.1089">getDatabaseImportSequence() const : std::optional&lt;std::uint32_t&gt;</text><ellipse cx="2738" cy="490.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="2747" y="492.9136">callForLedgerSQLByLedgerSeq() : bool</text><ellipse cx="2738" cy="503.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="2747" y="505.7183">callForLedgerSQLByShardIndex() : bool</text><ellipse cx="2738" cy="516.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2747" y="518.5229">callForTransactionSQLByLedgerSeq() : bool</text><ellipse cx="2738" cy="529.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2747" y="531.3276">callForTransactionSQLByShardIndex() : bool</text><ellipse cx="2738" cy="541.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2747" y="544.1323">iterateLedgerSQLsForward() : bool</text><ellipse cx="2738" cy="554.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="2747" y="556.937">iterateTransactionSQLsForward() : bool</text><ellipse cx="2738" cy="567.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="2747" y="569.7417">iterateLedgerSQLsBack() : bool</text><ellipse cx="2738" cy="580.2383" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="2747" y="582.5464">iterateTransactionSQLsBack() : bool</text><!--class C_0000450662133949096416--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="48" id="C_0000450662133949096416" style="stroke: #A80036; stroke-width: 1.5;" width="304" x="605" y="1946.4531"/><ellipse cx="620" cy="1962.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M622.9688,1968.0938 Q622.3906,1968.3906 621.75,1968.5313 Q621.1094,1968.6875 620.4063,1968.6875 Q617.9063,1968.6875 616.5781,1967.0469 Q615.2656,1965.3906 615.2656,1962.2656 Q615.2656,1959.1406 616.5781,1957.4844 Q617.9063,1955.8281 620.4063,1955.8281 Q621.1094,1955.8281 621.75,1955.9844 Q622.4063,1956.1406 622.9688,1956.4375 L622.9688,1959.1563 Q622.3438,1958.5781 621.75,1958.3125 Q621.1563,1958.0313 620.5313,1958.0313 Q619.1875,1958.0313 618.5,1959.1094 Q617.8125,1960.1719 617.8125,1962.2656 Q617.8125,1964.3594 618.5,1965.4375 Q619.1875,1966.5 620.5313,1966.5 Q621.1563,1966.5 621.75,1966.2344 Q622.3438,1965.9531 622.9688,1965.375 L622.9688,1968.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="634" y="1966.6074">TaggedCache</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="184" x="728" y="1943.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="182" x="729" y="1955.5918">base_uint&lt;256&gt;,NodeObject</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="606" x2="908" y1="1978.4531" y2="1978.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="606" x2="908" y1="1986.4531" y2="1986.4531"/><!--class C_0001060376113924291884--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="675.4297" id="C_0001060376113924291884" style="stroke: #A80036; stroke-width: 1.5;" width="420" x="2634" y="1632.9531"/><ellipse cx="2814.25" cy="1648.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2817.2188,1654.5938 Q2816.6406,1654.8906 2816,1655.0313 Q2815.3594,1655.1875 2814.6563,1655.1875 Q2812.1563,1655.1875 2810.8281,1653.5469 Q2809.5156,1651.8906 2809.5156,1648.7656 Q2809.5156,1645.6406 2810.8281,1643.9844 Q2812.1563,1642.3281 2814.6563,1642.3281 Q2815.3594,1642.3281 2816,1642.4844 Q2816.6563,1642.6406 2817.2188,1642.9375 L2817.2188,1645.6563 Q2816.5938,1645.0781 2816,1644.8125 Q2815.4063,1644.5313 2814.7813,1644.5313 Q2813.4375,1644.5313 2812.75,1645.6094 Q2812.0625,1646.6719 2812.0625,1648.7656 Q2812.0625,1650.8594 2812.75,1651.9375 Q2813.4375,1653 2814.7813,1653 Q2815.4063,1653 2816,1652.7344 Q2816.5938,1652.4531 2817.2188,1651.875 L2817.2188,1654.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="2834.75" y="1653.1074">SHAMap</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2635" x2="3053" y1="1664.9531" y2="1664.9531"/><ellipse cx="2645" cy="1676.8555" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="191" x="2654" y="1679.1636">branchFactor : const unsigned int</text><line style="stroke: #000000; stroke-width: 1.0;" x1="2654" x2="2845" y1="1681.1636" y2="1681.1636"/><ellipse cx="2645" cy="1689.6602" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="171" x="2654" y="1691.9683">leafDepth : const unsigned int</text><line style="stroke: #000000; stroke-width: 1.0;" x1="2654" x2="2825" y1="1693.9683" y2="1693.9683"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2635" x2="3053" y1="1698.5625" y2="1698.5625"/><ellipse cx="2645" cy="1710.4648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="2654" y="1712.7729">SHAMap() : void</text><ellipse cx="2645" cy="1723.2695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="2654" y="1725.5776">operator=() : SHAMap &amp;</text><ellipse cx="2645" cy="1736.0742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="2654" y="1738.3823">SHAMap() : void</text><ellipse cx="2645" cy="1748.8789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="2654" y="1751.187">SHAMap() : void</text><ellipse cx="2645" cy="1761.6836" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="2654" y="1763.9917">~SHAMap() = default : void</text><ellipse cx="2645" cy="1774.4883" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="2654" y="1776.7964">family() const : const Family &amp;</text><ellipse cx="2645" cy="1787.293" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2654" y="1789.6011">family() : Family &amp;</text><ellipse cx="2645" cy="1800.0977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="2654" y="1802.4058">begin() const : SHAMap::const_iterator</text><ellipse cx="2645" cy="1812.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="2654" y="1815.2104">end() const : SHAMap::const_iterator</text><ellipse cx="2645" cy="1825.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="2654" y="1828.0151">snapShot() const : std::shared_ptr&lt;SHAMap&gt;</text><ellipse cx="2645" cy="1838.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2654" y="1840.8198">setFull() : void</text><ellipse cx="2645" cy="1851.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="2654" y="1853.6245">setLedgerSeq() : void</text><ellipse cx="2645" cy="1864.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="2654" y="1866.4292">fetchRoot() : bool</text><ellipse cx="2645" cy="1876.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2654" y="1879.2339">hasItem() const : bool</text><ellipse cx="2645" cy="1889.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2654" y="1892.0386">delItem() : bool</text><ellipse cx="2645" cy="1902.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="2654" y="1904.8433">addItem() : bool</text><ellipse cx="2645" cy="1915.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="2654" y="1917.6479">getHash() const : SHAMapHash</text><ellipse cx="2645" cy="1928.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="2654" y="1930.4526">updateGiveItem() : bool</text><ellipse cx="2645" cy="1940.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2654" y="1943.2573">addGiveItem() : bool</text><ellipse cx="2645" cy="1953.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="368" x="2654" y="1956.062">peekItem() const : const std::shared_ptr&lt;const SHAMapItem&gt; &amp;</text><ellipse cx="2645" cy="1966.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="368" x="2654" y="1968.8667">peekItem() const : const std::shared_ptr&lt;const SHAMapItem&gt; &amp;</text><ellipse cx="2645" cy="1979.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="2654" y="1981.6714">upper_bound() const : SHAMap::const_iterator</text><ellipse cx="2645" cy="1992.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="2654" y="1994.4761">lower_bound() const : SHAMap::const_iterator</text><ellipse cx="2645" cy="2004.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="2654" y="2007.2808">visitNodes() const : void</text><ellipse cx="2645" cy="2017.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="2654" y="2020.0854">visitDifferences() const : void</text><ellipse cx="2645" cy="2030.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2654" y="2032.8901">visitLeaves() const : void</text><ellipse cx="2645" cy="2043.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="2654" y="2045.6948">getMissingNodes() : std::vector&lt;std::pair&lt;SHAMapNodeID,uint256&gt;&gt;</text><ellipse cx="2645" cy="2056.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2654" y="2058.4995">getNodeFat() const : bool</text><ellipse cx="2645" cy="2068.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="2654" y="2071.3042">getProofPath() const : std::optional&lt;std::vector&lt;Blob&gt;&gt;</text><ellipse cx="2645" cy="2081.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="130" x="2654" y="2084.1089">verifyProofPath() : bool</text><line style="stroke: #000000; stroke-width: 1.0;" x1="2654" x2="2784" y1="2086.1089" y2="2086.1089"/><ellipse cx="2645" cy="2094.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2654" y="2096.9136">serializeRoot() const : void</text><ellipse cx="2645" cy="2107.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="2654" y="2109.7183">addRootNode() : SHAMapAddNode</text><ellipse cx="2645" cy="2120.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="2654" y="2122.5229">addKnownNode() : SHAMapAddNode</text><ellipse cx="2645" cy="2133.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2654" y="2135.3276">setImmutable() : void</text><ellipse cx="2645" cy="2145.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="2654" y="2148.1323">isSynching() const : bool</text><ellipse cx="2645" cy="2158.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2654" y="2160.937">setSynching() : void</text><ellipse cx="2645" cy="2171.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="2654" y="2173.7417">clearSynching() : void</text><ellipse cx="2645" cy="2184.2383" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="2654" y="2186.5464">isValid() const : bool</text><ellipse cx="2645" cy="2197.043" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2654" y="2199.3511">compare() const : bool</text><ellipse cx="2645" cy="2209.8477" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2654" y="2212.1558">unshare() : int</text><ellipse cx="2645" cy="2222.6523" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2654" y="2224.9604">flushDirty() : int</text><ellipse cx="2645" cy="2235.457" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2654" y="2237.7651">walkMap() const : void</text><ellipse cx="2645" cy="2248.2617" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="2654" y="2250.5698">walkMapParallel() const : bool</text><ellipse cx="2645" cy="2261.0664" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="2654" y="2263.3745">deepCompare() const : bool</text><ellipse cx="2645" cy="2273.8711" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="2654" y="2276.1792">setUnbacked() : void</text><ellipse cx="2645" cy="2286.6758" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2654" y="2288.9839">dump() const : void</text><ellipse cx="2645" cy="2299.4805" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="2654" y="2301.7886">invariants() const : void</text><!--class C_0002085680201683292019--><rect fill="#FEFECE" filter="url(#fwcdvb71f41pp)" height="48" id="C_0002085680201683292019" style="stroke: #A80036; stroke-width: 1.5;" width="93" x="3167.5" y="284.9531"/><ellipse cx="3182.5" cy="300.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3185.4688,306.5938 Q3184.8906,306.8906 3184.25,307.0313 Q3183.6094,307.1875 3182.9063,307.1875 Q3180.4063,307.1875 3179.0781,305.5469 Q3177.7656,303.8906 3177.7656,300.7656 Q3177.7656,297.6406 3179.0781,295.9844 Q3180.4063,294.3281 3182.9063,294.3281 Q3183.6094,294.3281 3184.25,294.4844 Q3184.9063,294.6406 3185.4688,294.9375 L3185.4688,297.6563 Q3184.8438,297.0781 3184.25,296.8125 Q3183.6563,296.5313 3183.0313,296.5313 Q3181.6875,296.5313 3181,297.6094 Q3180.3125,298.6719 3180.3125,300.7656 Q3180.3125,302.8594 3181,303.9375 Q3181.6875,305 3183.0313,305 Q3183.6563,305 3184.25,304.7344 Q3184.8438,304.4531 3185.4688,303.875 L3185.4688,306.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="3196.5" y="305.1074">Database</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3168.5" x2="3259.5" y1="316.9531" y2="316.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3168.5" x2="3259.5" y1="324.9531" y2="324.9531"/><!--link C_0000259095379643657367 to C_0000855875579524244872--><path d="M2030.57,2447.8531 C2224.55,2450.2031 2578.43,2465.6331 2870,2539.9531 C2878.39,2542.0931 2963.02,2578.8231 3028.78,2607.5931 " fill="none" id="C_0000259095379643657367-C_0000855875579524244872" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3033.48,2609.6531,3026.8295,2602.3887,3028.8969,2607.6543,3023.6314,2609.7217,3033.48,2609.6531" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0000259095379643657367 to C_0000855875579524244872--><path d="M2043.43,2473.4031 C2309.69,2515.5931 2838.92,2599.4731 3033.23,2630.2631 " fill="none" id="C_0000259095379643657367-C_0000855875579524244872" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2030.56,2471.3631,2035.8624,2476.2503,2042.413,2473.2354,2037.1106,2468.3482,2030.56,2471.3631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2572" y="2546.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="2582" y="2553.02">mType</text><!--link C_0000259095379643657367 to C_0000434356742846908842--><path d="M1741.36,2467.4931 C1429.48,2508.5431 703.95,2604.0531 481.81,2633.2931 " fill="none" id="C_0000259095379643657367-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="476.66,2633.9731,486.1076,2636.7557,481.6166,2633.316,485.0563,2628.8251,476.66,2633.9731" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0000259095379643657367 to C_0000434356742846908842--><path d="M1728.35,2472.3431 C1576.11,2495.1331 1338.98,2529.9031 1133,2556.9531 C890.34,2588.8131 600.75,2621.5231 476.97,2635.2431 " fill="none" id="C_0000259095379643657367-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1741.44,2470.3831,1734.913,2467.3174,1729.5728,2472.1632,1736.0997,2475.2289,1741.44,2470.3831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1260" y="2546.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="46" x="1270" y="2553.02">mHash</text><!--link C_0000536634694005451753 to C_0000259095379643657367--><path d="M1776.32,2001.1631 C1794.24,2073.9331 1840.79,2262.8931 1867.12,2369.8031 " fill="none" id="C_0000536634694005451753-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="1868.8684" cy="2376.8749" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1866.9568" x2="1870.78" y1="2369.1066" y2="2384.6431"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1876.6367" x2="1861.1001" y1="2374.9633" y2="2378.7865"/><!--link C_0002214970677431989731 to C_0000259095379643657367--><path d="M1472.51,2103.4631 C1519.24,2169.9131 1581.46,2248.7231 1649,2307.9531 C1680.93,2335.9631 1719.36,2361.2531 1755.88,2382.3231 " fill="none" id="C_0002214970677431989731-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1760.33,2384.8731,1754.5173,2376.9225,1755.9941,2382.3832,1750.5334,2383.86,1760.33,2384.8731" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002069443800464145931 to C_0000855875579524244872--><path d="M1109.08,967.6731 C1412.7,999.6231 2102.55,1092.5031 2637,1315.9531 C2874.24,1415.1431 2995.39,1408.5831 3121,1632.9531 C3277.82,1913.0731 3145.11,2033.9431 3142,2354.9531 C3141.13,2444.7631 3153.52,2468.8631 3136,2556.9531 C3134.39,2565.0631 3132.2,2573.4531 3129.75,2581.6631 " fill="none" id="C_0002069443800464145931-C_0000855875579524244872" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3128.18,2586.7531,3134.6546,2579.3315,3129.6534,2581.9752,3127.0098,2576.974,3128.18,2586.7531" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002069443800464145931 to C_0000434356742846908842--><path d="M798.81,1078.5531 C730.34,1131.0731 647.68,1190.9731 569,1238.9531 C511.01,1274.3131 473.9,1258.9331 437,1315.9531 C314.64,1505.0531 375.62,2237.8731 385,2307.9531 C389.71,2343.1131 400.61,2349.8931 406,2384.9531 C418.64,2467.1831 418.18,2565.8531 416.99,2613.4731 " fill="none" id="C_0002069443800464145931-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="416.85,2618.7431,421.08,2609.8489,416.9785,2613.7448,413.0827,2609.6433,416.85,2618.7431" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002069443800464145931 to C_0000434356742846908842--><path d="M788.51,1097.5631 C723.56,1148.1931 646.17,1201.6831 569,1238.9531 C482.48,1280.7331 424.6,1239.0531 367,1315.9531 C47.99,1741.8731 344.59,2478.8031 405.56,2618.6731 " fill="none" id="C_0002069443800464145931-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="798.82,1089.4731,791.6305,1090.0312,789.3805,1096.8823,796.57,1096.3242,798.82,1089.4731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="298" y="1968.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="36" x="308" y="1975.02">read_</text><!--link C_0002069443800464145931 to C_0000259095379643657367--><path d="M798.8,1070.1231 C728.92,1122.2531 645.16,1184.1631 569,1238.9531 C550.08,1252.5631 539.38,1249.8731 526,1268.9531 C442.22,1388.3631 460.05,1441.3331 441,1585.9531 C418.68,1755.4031 336.91,2231.3931 455,2354.9531 C498.77,2400.7431 1377.75,2431.5631 1735.99,2442.2731 " fill="none" id="C_0002069443800464145931-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1741.23,2442.4331,1732.3479,2438.1777,1736.232,2442.2903,1732.1194,2446.1745,1741.23,2442.4331" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002069443800464145931 to C_0000259095379643657367--><path d="M798.81,1155.1331 C596.6,1444.0131 300.72,1977.1531 587,2307.9531 C661.11,2393.5831 1410.31,2429.9031 1736.07,2441.7331 " fill="none" id="C_0002069443800464145931-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1741.31,2441.9231,1732.4647,2437.5918,1736.3134,2441.7375,1732.1677,2445.5863,1741.31,2441.9231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="560" y="1592.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="36" x="570" y="1599.02">read_</text><!--link C_0002069443800464145931 to C_0002214970677431989731--><path d="M1109.08,1226.7831 C1123.48,1256.4531 1137.11,1286.5531 1149,1315.9531 C1198.69,1438.8231 1185.67,1478.0531 1230,1602.9531 C1257.39,1680.1131 1293.15,1764.1231 1323.73,1832.2231 " fill="none" id="C_0002069443800464145931-C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1325.92,1837.1031,1325.8744,1827.2544,1323.8682,1832.5435,1318.579,1830.5373,1325.92,1837.1031" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001089131121863903009 to C_0002214970677431989731--><path d="M1032.6,1556.1631 C1045.58,1572.6231 1059.55,1588.7431 1074,1602.9531 C1090.61,1619.2931 1099.97,1617.0531 1117,1632.9531 C1181.25,1692.9331 1243.46,1768.5031 1292.04,1832.8231 " fill="none" id="C_0001089131121863903009-C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1295.22,1837.0431,1293.02,1827.4431,1292.22,1833.0431,1286.62,1832.2431,1295.22,1837.0431" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001089131121863903009 to C_0002214970677431989731--><path d="M1053.64,1556.1631 C1074.64,1581.4531 1096.61,1608.0331 1117,1632.9531 C1170.69,1698.5631 1229.79,1771.8231 1279.07,1833.1931 " fill="none" id="C_0001089131121863903009-C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1282.3,1837.2231,1279.7885,1827.6999,1279.1713,1833.323,1273.5482,1832.7058,1282.3,1837.2231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1094" y="1592.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="61" x="1104" y="1599.02">backend_</text><!--link C_0001089131121863903009 to C_0002069443800464145931--><path d="M965.83,1315.8931 C966.5,1293.4931 966.97,1269.1931 967.24,1244.1331 " fill="none" id="C_0001089131121863903009-C_0002069443800464145931" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="967.29,1239.1131,963.213,1248.0785,967.2471,1244.1129,971.2127,1248.1471,967.29,1239.1131" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002069443800464145931 to C_0001089131121863903009--><path d="M941.67,1259.3731 C941.94,1279.0331 942.32,1298.0631 942.82,1315.8931 " fill="none" id="C_0002069443800464145931-C_0001089131121863903009" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="934.67,1259.1831,941.45,1239.1131,948.67,1259.0331,934.67,1259.1831" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001089131121863903009 to C_0000855875579524244872--><path d="M1132.05,1473.4431 C1271.33,1500.5631 1470.2,1536.1631 1646,1555.9531 C1803.68,1573.7031 2960.89,1519.6731 3072,1632.9531 C3138.38,1700.6231 3117.57,2374.3431 3109.52,2581.6031 " fill="none" id="C_0001089131121863903009-C_0000855875579524244872" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3109.32,2586.7131,3113.6765,2577.8802,3109.5198,2581.7171,3105.6829,2577.5604,3109.32,2586.7131" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001089131121863903009 to C_0000434356742846908842--><path d="M775.69,1494.7131 C707.08,1525.4731 633.99,1570.2331 587,1632.9531 C348.2,1951.6531 396.48,2485.7731 412.19,2613.7731 " fill="none" id="C_0001089131121863903009-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="412.83,2618.8631,415.6928,2609.4395,412.2151,2613.9011,407.7536,2610.4234,412.83,2618.8631" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001089131121863903009 to C_0000259095379643657367--><path d="M942.82,1556.0131 C924.66,1782.0531 902.05,2259.3731 1024,2354.9531 C1078.75,2397.8631 1504.03,2426.5131 1736.08,2439.1231 " fill="none" id="C_0001089131121863903009-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1741.18,2439.4031,1732.4101,2434.9212,1736.1874,2439.1321,1731.9764,2442.9094,1741.18,2439.4031" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001089131121863903009 to C_0000259095379643657367--><path d="M972.78,1556.0731 C976.62,1581.4331 980.55,1608.0631 984,1632.9531 C1004.77,1782.6731 963.49,2198.7431 1068,2307.9531 C1157.63,2401.6031 1525.6,2432.0331 1736.2,2441.8431 " fill="none" id="C_0001089131121863903009-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1741.45,2442.0831,1732.6421,2437.6763,1736.4552,2441.8548,1732.2767,2445.668,1741.45,2442.0831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1071" y="1968.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="1081" y="1975.02">cache_</text><!--link C_0001089131121863903009 to C_0000450662133949096416--><path d="M909.91,1556.1231 C863.5,1681.5731 793.61,1870.4931 767.41,1941.3231 " fill="none" id="C_0001089131121863903009-C_0000450662133949096416" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="765.6,1946.2131,772.4866,1939.1722,767.3431,1941.5268,764.9885,1936.3833,765.6,1946.2131" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001089131121863903009 to C_0000450662133949096416--><path d="M845.54,1556.2331 C839.38,1565.9331 833.76,1575.8831 829,1585.9531 C770.82,1708.9531 759.61,1875.0131 757.48,1940.8531 " fill="none" id="C_0001089131121863903009-C_0000450662133949096416" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="757.33,1946.1631,761.6115,1937.2936,757.4875,1941.1656,753.6155,1937.0416,757.33,1946.1631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="832" y="1592.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="842" y="1599.02">cache_</text><!--link C_0000240241992813306142 to C_0000259095379643657367--><path d="M2473.02,1485.6131 C2478.89,1648.0931 2490.45,2169.5031 2404,2307.9531 C2364.81,2370.7131 2174.58,2408.9331 2035.98,2428.8931 " fill="none" id="C_0000240241992813306142-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2030.66,2429.6531,2040.1396,2432.3248,2035.6086,2428.938,2038.9954,2424.407,2030.66,2429.6531" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0000240241992813306142 to C_0002214970677431989731--><path d="M2418.29,1485.6731 C2387.77,1510.9831 2347.31,1539.8931 2306,1555.9531 C2237.49,1582.5831 1713.01,1596.8231 1649,1632.9531 C1567.72,1678.8331 1503.14,1761.2831 1458.55,1833.0831 " fill="none" id="C_0000240241992813306142-C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1455.91,1837.3631,1464.0502,1831.819,1458.5433,1833.1127,1457.2495,1827.6058,1455.91,1837.3631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2031" y="1592.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="61" x="2041" y="1599.02">backend_</text><!--link C_0001343369207418016912 to C_0000259095379643657367--><path d="M2736.95,1181.8131 C2725.62,1299.4931 2698.67,1441.8431 2637,1555.9531 C2613.23,1599.9331 2577.82,1588.4731 2555,1632.9531 C2416.89,1902.1931 2635.83,2057.5131 2466,2307.9531 C2441.99,2343.3631 2422.24,2340.4331 2382,2354.9531 C2349.6,2366.6431 2169.64,2398.5331 2035.76,2421.3731 " fill="none" id="C_0001343369207418016912-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2030.62,2422.2531,2040.1655,2424.6788,2035.5485,2421.4103,2038.8169,2416.7933,2030.62,2422.2531" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001343369207418016912 to C_0000434356742846908842--><path d="M2898.2,1181.5631 C2993.02,1326.1531 3100.49,1501.3431 3124,1585.9531 C3209.93,1895.1231 3289.06,2034.5831 3121,2307.9531 C2993.69,2515.0431 2869.21,2495.5231 2634,2556.9531 C2421.41,2612.4731 827.12,2636.5331 481.83,2641.1231 " fill="none" id="C_0001343369207418016912-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="476.59,2641.1931,485.6351,2645.09,481.5897,2641.136,485.5437,2637.0905,476.59,2641.1931" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001343369207418016912 to C_0000240241992813306142--><path d="M2614.17,1181.5131 C2571.92,1256.3131 2528.74,1332.7431 2501.01,1381.8331 " fill="none" id="C_0001343369207418016912-C_0000240241992813306142" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2498.54,1386.2031,2506.4533,1380.3397,2501.0022,1381.8514,2499.4905,1376.4002,2498.54,1386.2031" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001343369207418016912 to C_0002214970677431989731--><path d="M2551.8,1003.6431 C2368.32,1058.5531 2090.18,1160.1131 1889,1315.9531 C1701.67,1461.0631 1546.9,1692.2131 1461.05,1837.1631 " fill="none" id="C_0001343369207418016912-C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2564.29,999.9231,2557.4001,997.7949,2552.7856,1003.3362,2559.6755,1005.4645,2564.29,999.9231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1892" y="1433.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="61" x="1902" y="1440.52">backend_</text><!--link C_0000286650811473765618 to C_0000259095379643657367--><path d="M2312.89,2020.1731 C2337.1,2099.7931 2370.75,2258.5631 2293,2354.9531 C2260.58,2395.1431 2138.01,2418.9531 2035.77,2432.1531 " fill="none" id="C_0000286650811473765618-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2030.61,2432.8131,2040.0497,2435.6225,2035.5685,2432.1701,2039.0208,2427.6889,2030.61,2432.8131" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0000286650811473765618 to C_0000259095379643657367--><path d="M2292.93,2033.3731 C2285.44,2117.5131 2259.75,2267.4731 2172,2354.9531 C2134.25,2392.5831 2081.03,2414.7531 2030.72,2427.8131 " fill="none" id="C_0000286650811473765618-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2294,2020.2031,2289.5253,2025.858,2293.0242,2032.1634,2297.4988,2026.5085,2294,2020.2031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189" y="2344.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="67" x="2199" y="2351.02">mWriteSet</text><!--link C_0000948563456986781213 to C_0000286650811473765618--><path d="M2151.7,1492.1831 C2181.82,1591.8131 2245.08,1801.0231 2276.88,1906.2231 " fill="none" id="C_0000948563456986781213-C_0000286650811473765618" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="2278.9337" cy="1912.9958" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="2276.6175" x2="2281.25" y1="1905.3384" y2="1920.6531"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="2286.5911" x2="2271.2764" y1="1910.6795" y2="1915.312"/><!--link C_0000948563456986781213 to C_0000259095379643657367--><path d="M2140.63,1492.1131 C2156.86,1661.1631 2197.59,2169.0331 2117,2307.9531 C2097.86,2340.9531 2067.45,2366.9831 2034.91,2387.1431 " fill="none" id="C_0000948563456986781213-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2030.51,2389.8231,2040.2776,2388.5604,2034.781,2387.2234,2036.118,2381.7268,2030.51,2389.8231" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0000312573841898533211 to C_0000259095379643657367--><path d="M1991.03,2020.0531 C1969.97,2105.5331 1926.29,2282.9031 1902.43,2379.7631 " fill="none" id="C_0000312573841898533211-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1901.16,2384.8831,1907.2019,2377.1052,1902.3592,2380.0291,1899.4354,2375.1864,1901.16,2384.8831" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002032177822726797791 to C_0002214970677431989731--><path d="M1261.01,422.5231 C1288.81,601.3331 1341.51,961.4931 1366,1268.9531 C1381.53,1463.9931 1386.23,1690.4031 1387.58,1831.8131 " fill="none" id="C_0002032177822726797791-C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1387.63,1837.2331,1391.5527,1828.1992,1387.5871,1832.2333,1383.553,1828.2677,1387.63,1837.2331" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002032177822726797791 to C_0002214970677431989731--><path d="M1286.83,422.7731 C1311.73,491.8931 1341.05,582.7831 1357,665.9531 C1437.27,1084.4231 1416.26,1592.2531 1399.51,1831.7731 " fill="none" id="C_0002032177822726797791-C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1399.14,1837.0331,1403.7728,1828.3419,1399.4973,1832.0459,1395.7933,1827.7703,1399.14,1837.0331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1418" y="1275.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="111" x="1428" y="1282.02">writableBackend_</text><!--link C_0002032177822726797791 to C_0002214970677431989731--><path d="M1233.7,422.7331 C1220.59,604.9131 1201.84,974.9831 1236,1285.9531 C1257.12,1478.2131 1310.71,1695.5231 1348.24,1832.4731 " fill="none" id="C_0002032177822726797791-C_0002214970677431989731" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1349.57,1837.3131,1351.0317,1827.5733,1348.2399,1832.4933,1343.3199,1829.7015,1349.57,1837.3131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1239" y="1275.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="108" x="1249" y="1282.02">archiveBackend_</text><!--link C_0002032177822726797791 to C_0002069443800464145931--><path d="M1192.16,422.7931 C1162.24,489.2231 1122.9,576.5431 1084.84,661.0331 " fill="none" id="C_0002032177822726797791-C_0002069443800464145931" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1082.68,665.8231,1090.0287,659.2659,1084.7372,661.2659,1082.7371,655.9744,1082.68,665.8231" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002032177822726797791 to C_0000855875579524244872--><path d="M1396.83,337.7331 C1803.95,411.8431 2882.4,612.2631 2939,665.9531 C3261.65,971.9831 3138.4,1192.0031 3196,1632.9531 C3234.86,1930.4231 3215.75,2008.6031 3196,2307.9531 C3188.65,2419.3431 3202.03,2452.3631 3163,2556.9531 C3159.82,2565.4731 3155.66,2574.0031 3151.03,2582.1931 " fill="none" id="C_0002032177822726797791-C_0000855875579524244872" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3148.42,2586.7131,3156.3993,2580.9398,3150.9314,2582.3896,3149.4816,2576.9217,3148.42,2586.7131" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002032177822726797791 to C_0000434356742846908842--><path d="M1089.46,319.3231 C758.18,348.6831 6,468.5231 6,951.4531 C6,951.4531 6,951.4531 6,2448.4531 C6,2598.7231 234.02,2632.4731 349.97,2639.9331 " fill="none" id="C_0002032177822726797791-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="355.06,2640.2431,346.3295,2635.6848,350.0699,2639.9286,345.8262,2643.669,355.06,2640.2431" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002032177822726797791 to C_0000259095379643657367--><path d="M1089.32,337.5331 C814.65,396.6331 268,563.0531 268,951.4531 C268,951.4531 268,951.4531 268,1595.4531 C268,1941.0731 117.85,2217.5931 435,2354.9531 C552.08,2405.6631 1389.38,2433.3531 1736.17,2442.7431 " fill="none" id="C_0002032177822726797791-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1741.24,2442.8831,1732.3461,2438.6524,1736.2417,2442.7542,1732.1399,2446.6498,1741.24,2442.8831" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002003532416511686684 to C_0000434356742846908842--><path d="M2726.84,351.4131 C2436.58,409.7231 1886.05,516.8731 1414,588.9531 C1273.92,610.3431 901.23,590.9531 781,665.9531 C360.37,928.3231 328.62,1148.1531 225,1632.9531 C193.65,1779.6431 150.08,2178.0031 225,2307.9531 C259.12,2367.1231 317.54,2329.9231 358,2384.9531 C384.76,2421.3531 404.76,2554.6031 412.49,2613.5631 " fill="none" id="C_0002003532416511686684-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="413.16,2618.6931,415.9426,2609.2455,412.5029,2613.7365,408.012,2610.2968,413.16,2618.6931" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002003532416511686684 to C_0002069443800464145931--><path d="M2726.9,375.8931 C2332.7,503.8631 1471.34,783.5031 1114.14,899.4631 " fill="none" id="C_0002003532416511686684-C_0002069443800464145931" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1109.18,901.0731,1118.975,902.1015,1113.9361,899.5306,1116.507,894.4917,1109.18,901.0731" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002003532416511686684 to C_0000855875579524244872--><path d="M3133.21,577.6631 C3256.8,742.8931 3391,927.7731 3391,951.4531 C3391,951.4531 3391,951.4531 3391,2448.4531 C3391,2500.6631 3383.85,2521.0031 3346,2556.9531 C3302.23,2598.5231 3236.81,2619.9531 3185.47,2630.8831 " fill="none" id="C_0002003532416511686684-C_0000855875579524244872" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3180.55,2631.9031,3190.174,2633.9958,3185.4462,2630.8896,3188.5524,2626.1619,3180.55,2631.9031" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002003532416511686684 to C_0000259095379643657367--><path d="M2981.73,589.1631 C2982.41,604.9531 2982.55,620.6331 2982,635.9531 C2972.44,904.4631 3032.79,987.1731 2939,1238.9531 C2877.59,1403.8031 2820.4,1425.8531 2702,1555.9531 C2667.69,1593.6531 2640.41,1587.6731 2617,1632.9531 C2478.25,1901.3631 2714.27,2063.9931 2536,2307.9531 C2506.31,2348.5831 2481.13,2340.2631 2433,2354.9531 C2355.01,2378.7531 2332.43,2371.5331 2252,2384.9531 C2180.92,2396.8131 2102.1,2410.0531 2035.86,2421.1931 " fill="none" id="C_0002003532416511686684-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2030.71,2422.0631,2040.2486,2424.5157,2035.6408,2421.2342,2038.9223,2416.6264,2030.71,2422.0631" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002003532416511686684 to C_0001343369207418016912--><path d="M2891.08,589.3031 C2887.39,605.1731 2883.37,620.8131 2879,635.9531 C2871.14,663.1731 2861.51,691.1531 2851.05,718.6831 " fill="none" id="C_0002003532416511686684-C_0001343369207418016912" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2849.23,723.4531,2856.1799,716.4747,2851.0153,718.7827,2848.7073,713.6181,2849.23,723.4531" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0002003532416511686684 to C_0001343369207418016912--><path d="M2914.34,602.1731 C2911.88,613.6431 2909.11,624.9431 2906,635.9531 C2897.79,665.0231 2886.75,694.5331 2874.27,723.2331 " fill="none" id="C_0002003532416511686684-C_0001343369207418016912" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2916.99,589.1431,2911.8756,594.2267,2914.6011,600.9029,2919.7155,595.8193,2916.99,589.1431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2913" y="625.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="2923" y="632.02">shards_</text><!--link C_0000450662133949096416 to C_0000434356742846908842--><path d="M745.58,1994.7131 C718.24,2049.9531 646.26,2193.0331 578,2307.9531 C514.93,2414.1531 465.67,2423.3231 425,2539.9531 C416.69,2563.7831 414.83,2592.5531 414.82,2613.4531 " fill="none" id="C_0000450662133949096416-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="414.85,2618.5931,418.7727,2609.5592,414.8071,2613.5933,410.773,2609.6277,414.85,2618.5931" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0000450662133949096416 to C_0000259095379643657367--><path d="M759.91,1994.5431 C769.88,2062.9831 809.38,2265.5031 936,2354.9531 C999.8,2400.0231 1485.1,2428.3431 1736.3,2440.1331 " fill="none" id="C_0000450662133949096416-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1741.45,2440.3731,1732.6421,2435.9663,1736.4552,2440.1448,1732.2767,2443.958,1741.45,2440.3731" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001060376113924291884 to C_0000434356742846908842--><path d="M2690.65,2308.0131 C2675.73,2325.1831 2659.54,2341.0431 2642,2354.9531 C2295.48,2629.8331 812.95,2642.8831 481.78,2642.3231 " fill="none" id="C_0001060376113924291884-C_0000434356742846908842" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="476.52,2642.3131,485.5085,2646.3388,481.52,2642.3274,485.5314,2638.3389,476.52,2642.3131" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001060376113924291884 to C_0000855875579524244872--><path d="M2976.08,2308.1731 C3017.38,2413.4831 3058.61,2518.5931 3083.46,2581.9531 " fill="none" id="C_0001060376113924291884-C_0000855875579524244872" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3085.37,2586.8131,3085.804,2576.9738,3083.5426,2582.159,3078.3574,2579.8976,3085.37,2586.8131" style="stroke: #A80036; stroke-width: 1.0;"/><!--link C_0001060376113924291884 to C_0000259095379643657367--><path d="M2664.72,2308.1831 C2646.95,2325.7531 2627.73,2341.6131 2607,2354.9531 C2515.28,2413.9731 2218.62,2435.0031 2035.66,2442.4431 " fill="none" id="C_0001060376113924291884-C_0000259095379643657367" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2030.55,2442.6531,2039.7031,2446.2892,2035.546,2442.4527,2039.3824,2438.2956,2030.55,2442.6531" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
title Class Diagram for nodestore
enum "NodeObjectType" as C_0000855875579524244872
enum C_0000855875579524244872 {
hotUNKNOWN
hotLEDGER
hotACCOUNT_NODE
hotTRANSACTION_NODE
hotDUMMY
}
class "base_uint<256>" as C_0000434356742846908842
class C_0000434356742846908842 {
}
class "NodeObject" as C_0000259095379643657367
class C_0000259095379643657367 {
+NodeObject() : void
{static} +createObject() : std::shared_ptr<NodeObject>
+getType() const : NodeObjectType
+getHash() const : const uint256 &
+getData() const : const Blob &
{static} +keyBytes : const std::size_t
}
class "NodeObject::PrivateAccess" as C_0000536634694005451753
class C_0000536634694005451753 {
+PrivateAccess() = default : void
}
abstract "NodeStore::Backend" as C_0002214970677431989731
abstract C_0002214970677431989731 {
+~Backend() = default : void
{abstract} +getName() = 0 : std::string
{abstract} +open() = 0 : void
{abstract} +isOpen() = 0 : bool
+open() : void
{abstract} +close() = 0 : void
{abstract} +fetch() = 0 : NodeStore::Status
{abstract} +fetchBatch() = 0 : std::pair<std::vector<std::shared_ptr<NodeObject>>,Status>
{abstract} +store() = 0 : void
{abstract} +storeBatch() = 0 : void
{abstract} +sync() = 0 : void
{abstract} +for_each() = 0 : void
{abstract} +getWriteLoad() = 0 : int
{abstract} +setDeletePath() = 0 : void
+verify() : void
{abstract} +fdRequired() const = 0 : int
+counters() const : std::optional<Counters<std::uint64_t>>
}
abstract "NodeStore::Database" as C_0002069443800464145931
abstract C_0002069443800464145931 {
+Database() : void
+Database() : void
+~Database() : void
{abstract} +getName() const = 0 : std::string
{abstract} +importDatabase() = 0 : void
{abstract} +getWriteLoad() const = 0 : std::int32_t
{abstract} +store() = 0 : void
{abstract} +isSameDB() = 0 : bool
{abstract} +sync() = 0 : void
+fetchNodeObject() : std::shared_ptr<NodeObject>
+asyncFetch() : void
{abstract} +storeLedger() = 0 : bool
{abstract} +sweep() = 0 : void
+getStoreCount() const : std::uint64_t
+getFetchTotalCount() const : std::uint32_t
+getFetchHitCount() const : std::uint32_t
+getStoreSize() const : std::uint64_t
+getFetchSize() const : std::uint32_t
+getCountsJson() : void
+fdRequired() const : int
+stop() : void
+isStopping() const : bool
+ledgersPerShard() const : std::uint32_t
+earliestLedgerSeq() const : std::uint32_t
+earliestShardIndex() const : std::uint32_t
+firstLedgerSeq() const : std::uint32_t
+lastLedgerSeq() const : std::uint32_t
+seqToShardIndex() const : std::uint32_t
+maxLedgers() const : std::uint32_t
#storeStats() : void
#importInternal() : void
#storeLedger() : bool
#updateFetchMetrics() : void
#j_ : const beast::Journal
#fdRequired_ : int
#fetchHitCount_ : std::atomic<std::uint32_t>
#fetchSz_ : std::atomic<std::uint32_t>
#ledgersPerShard_ : const std::uint32_t
#earliestLedgerSeq_ : const std::uint32_t
#earliestShardIndex_ : const std::uint32_t
#requestBundle_ : const int
}
class "NodeStore::DatabaseNodeImp" as C_0001089131121863903009
class C_0001089131121863903009 {
+DatabaseNodeImp() : void
+DatabaseNodeImp() : void
+operator=() : NodeStore::DatabaseNodeImp &
+DatabaseNodeImp() : void
+~DatabaseNodeImp() : void
+getName() const : std::string
+getWriteLoad() const : std::int32_t
+importDatabase() : void
+store() : void
+isSameDB() : bool
+sync() : void
+fetchBatch() : std::vector<std::shared_ptr<NodeObject>>
+asyncFetch() : void
+storeLedger() : bool
+sweep() : void
}
class "NodeStore::DeterministicShard" as C_0000240241992813306142
class C_0000240241992813306142 {
+~DeterministicShard() : void
+close() : void
+getDir() const : const boost::filesystem::path &
+store() : bool
}
class "NodeStore::Shard" as C_0001343369207418016912
class C_0001343369207418016912 {
+Shard() : void
+Shard() : void
+operator=() : NodeStore::Shard &
+operator=() : NodeStore::Shard &
+Shard() : void
+Shard() : void
+~Shard() : void
+init() : bool
+isOpen() const : bool
+tryClose() : bool
+stop() : void
+prepare() : std::optional<std::uint32_t>
+storeNodeObject() : bool
+fetchNodeObject() : std::shared_ptr<NodeObject>
+storeLedger() : NodeStore::Shard::StoreLedgerResult
+setLedgerStored() : bool
+containsLedger() const : bool
+index() const : std::uint32_t
+getDir() const : const boost::filesystem::path &
+getLastUse() const : std::chrono::steady_clock::time_point
+getFileInfo() const : std::pair<std::uint64_t,std::uint32_t>
+getState() const : ShardState
+getPercentProgress() const : std::uint32_t
+getWriteLoad() : std::int32_t
+isLegacy() const : bool
+finalize() : bool
+removeOnDestroy() : void
+getStoredSeqs() : std::string
+callForLedgerSQL() : _Bool
+callForTransactionSQL() : _Bool
{static} +version : const std::uint32_t
{static} +finalKey : const uint256
}
class "NodeStore::BatchWriter" as C_0000286650811473765618
class C_0000286650811473765618 {
+BatchWriter() : void
+~BatchWriter() : void
+store() : void
+getWriteLoad() : int
}
abstract "NodeStore::BatchWriter::Callback" as C_0000948563456986781213
abstract C_0000948563456986781213 {
+~Callback() = default : void
+Callback() = default : void
+Callback() : void
+operator=() : NodeStore::BatchWriter::Callback &
{abstract} +writeBatch() = 0 : void
}
class "NodeStore::EncodedBlob" as C_0000312573841898533211
class C_0000312573841898533211 {
+prepare() : void
+getKey() const : const void *
+getSize() const : std::size_t
+getData() const : const void *
}
class "NodeStore::DatabaseRotatingImp" as C_0002032177822726797791
class C_0002032177822726797791 {
+DatabaseRotatingImp() : void
+DatabaseRotatingImp() : void
+operator=() : NodeStore::DatabaseRotatingImp &
+DatabaseRotatingImp() : void
+~DatabaseRotatingImp() : void
+rotateWithLock() : void
+getName() const : std::string
+getWriteLoad() const : std::int32_t
+importDatabase() : void
+isSameDB() : bool
+store() : void
+sync() : void
+storeLedger() : bool
+sweep() : void
}
class "NodeStore::DatabaseShardImp" as C_0002003532416511686684
class C_0002003532416511686684 {
+DatabaseShardImp() : void
+DatabaseShardImp() : void
+DatabaseShardImp() : void
+operator=() : NodeStore::DatabaseShardImp &
+operator=() : NodeStore::DatabaseShardImp &
+DatabaseShardImp() : void
+~DatabaseShardImp() : void
+init() : bool
+prepareLedger() : std::optional<std::uint32_t>
+prepareShards() : bool
+removePreShard() : void
+getPreShards() : std::string
+importShard() : bool
+fetchLedger() : std::shared_ptr<Ledger>
+setStored() : void
+getShardInfo() const : std::unique_ptr<ShardInfo>
+getNumTasks() const : size_t
+getRootDir() const : const boost::filesystem::path &
+getName() const : std::string
+stop() : void
+importDatabase() : void
+doImportDatabase() : void
+getWriteLoad() const : std::int32_t
+isSameDB() : bool
+store() : void
+sync() : void
+storeLedger() : bool
+sweep() : void
+getDatabaseImportStatus() const : Json::Value
+startNodeToShard() : Json::Value
+stopNodeToShard() : Json::Value
+getDatabaseImportSequence() const : std::optional<std::uint32_t>
+callForLedgerSQLByLedgerSeq() : bool
+callForLedgerSQLByShardIndex() : bool
+callForTransactionSQLByLedgerSeq() : bool
+callForTransactionSQLByShardIndex() : bool
+iterateLedgerSQLsForward() : bool
+iterateTransactionSQLsForward() : bool
+iterateLedgerSQLsBack() : bool
+iterateTransactionSQLsBack() : bool
}
class "TaggedCache<base_uint<256>,NodeObject>" as C_0000450662133949096416
class C_0000450662133949096416 {
}
class "SHAMap" as C_0001060376113924291884
class C_0001060376113924291884 {
+SHAMap() : void
+operator=() : SHAMap &
+SHAMap() : void
+SHAMap() : void
+~SHAMap() = default : void
+family() const : const Family &
+family() : Family &
+begin() const : SHAMap::const_iterator
+end() const : SHAMap::const_iterator
+snapShot() const : std::shared_ptr<SHAMap>
+setFull() : void
+setLedgerSeq() : void
+fetchRoot() : bool
+hasItem() const : bool
+delItem() : bool
+addItem() : bool
+getHash() const : SHAMapHash
+updateGiveItem() : bool
+addGiveItem() : bool
+peekItem() const : const std::shared_ptr<const SHAMapItem> &
+peekItem() const : const std::shared_ptr<const SHAMapItem> &
+upper_bound() const : SHAMap::const_iterator
+lower_bound() const : SHAMap::const_iterator
+visitNodes() const : void
+visitDifferences() const : void
+visitLeaves() const : void
+getMissingNodes() : std::vector<std::pair<SHAMapNodeID,uint256>>
+getNodeFat() const : bool
+getProofPath() const : std::optional<std::vector<Blob>>
{static} +verifyProofPath() : bool
+serializeRoot() const : void
+addRootNode() : SHAMapAddNode
+addKnownNode() : SHAMapAddNode
+setImmutable() : void
+isSynching() const : bool
+setSynching() : void
+clearSynching() : void
+isValid() const : bool
+compare() const : bool
+unshare() : int
+flushDirty() : int
+walkMap() const : void
+walkMapParallel() const : bool
+deepCompare() const : bool
+setUnbacked() : void
+dump() const : void
+invariants() const : void
{static} +branchFactor : const unsigned int
{static} +leafDepth : const unsigned int
}
class "Database" as C_0002085680201683292019
class C_0002085680201683292019 {
}
C_0000259095379643657367 ..> C_0000855875579524244872
C_0000259095379643657367 ..> C_0000434356742846908842
C_0000259095379643657367 o- - C_0000855875579524244872 : -mType
C_0000259095379643657367 o- - C_0000434356742846908842 : -mHash
C_0000536634694005451753 - -+ C_0000259095379643657367
C_0002214970677431989731 ..> C_0000259095379643657367
C_0002069443800464145931 ..> C_0000855875579524244872
C_0002069443800464145931 ..> C_0000434356742846908842
C_0002069443800464145931 ..> C_0000259095379643657367
C_0002069443800464145931 ..> C_0002214970677431989731
C_0002069443800464145931 o- - C_0000434356742846908842 : -read_
C_0002069443800464145931 - -> C_0000259095379643657367 : -read_
C_0001089131121863903009 ..> C_0002214970677431989731
C_0001089131121863903009 ..> C_0002069443800464145931
C_0001089131121863903009 ..> C_0000855875579524244872
C_0001089131121863903009 ..> C_0000434356742846908842
C_0001089131121863903009 ..> C_0000259095379643657367
C_0001089131121863903009 ..> C_0000450662133949096416
C_0001089131121863903009 - -> C_0000450662133949096416 : -cache_
C_0001089131121863903009 - -> C_0000259095379643657367 : -cache_
C_0001089131121863903009 - -> C_0002214970677431989731 : -backend_
C_0002069443800464145931 <|- - C_0001089131121863903009
C_0000240241992813306142 ..> C_0000259095379643657367
C_0000240241992813306142 - -> C_0002214970677431989731 : -backend_
C_0001343369207418016912 ..> C_0000259095379643657367
C_0001343369207418016912 ..> C_0000434356742846908842
C_0001343369207418016912 ..> C_0000240241992813306142
C_0001343369207418016912 o- - C_0002214970677431989731 : -backend_
C_0000286650811473765618 ..> C_0000259095379643657367
C_0000286650811473765618 o- - C_0000259095379643657367 : -mWriteSet
C_0000948563456986781213 - -+ C_0000286650811473765618
C_0000948563456986781213 ..> C_0000259095379643657367
C_0000312573841898533211 ..> C_0000259095379643657367
C_0002032177822726797791 ..> C_0002214970677431989731
C_0002032177822726797791 ..> C_0002069443800464145931
C_0002032177822726797791 ..> C_0000855875579524244872
C_0002032177822726797791 ..> C_0000434356742846908842
C_0002032177822726797791 ..> C_0000259095379643657367
C_0002032177822726797791 - -> C_0002214970677431989731 : -writableBackend_
C_0002032177822726797791 - -> C_0002214970677431989731 : -archiveBackend_
C_0002003532416511686684 ..> C_0000434356742846908842
C_0002003532416511686684 ..> C_0002069443800464145931
C_0002003532416511686684 ..> C_0000855875579524244872
C_0002003532416511686684 ..> C_0000259095379643657367
C_0002003532416511686684 ..> C_0001343369207418016912
C_0002003532416511686684 o- - C_0001343369207418016912 : -shards_
C_0000450662133949096416 ..> C_0000434356742846908842
C_0000450662133949096416 ..> C_0000259095379643657367
C_0001060376113924291884 ..> C_0000434356742846908842
C_0001060376113924291884 ..> C_0000855875579524244872
C_0001060376113924291884 ..> C_0000259095379643657367
@enduml

PlantUML version 1.2018.13(Mon Nov 26 17:11:51 UTC 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.17+8-post-Ubuntu-1ubuntu220.04
Operating System: Linux
OS Version: 5.4.0-91-generic
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>
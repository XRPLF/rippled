@startuml
title Class Diagram for overlay
class "Section" as C_0001196237645647586305
class C_0001196237645647586305 {
+Section() : void
+name() const : const std::string &
+lines() const : const std::vector<std::string> &
+values() const : const std::vector<std::string> &
+legacy() : void
+legacy() const : std::string
+set() : void
+append() : void
+append() : void
+exists() const : bool
+had_trailing_comments() const : bool
+empty() const : bool
+size() const : std::size_t
+begin() const : Section::const_iterator
+cbegin() const : Section::const_iterator
+end() const : Section::const_iterator
+cend() const : Section::const_iterator
+get() : std::optional<T>
+value_or() : T
}
class "BasicConfig" as C_0000523676121508856554
class C_0000523676121508856554 {
+exists() const : bool
+section() : Section &
+section() const : const Section &
+operator[]() const : const Section &
+operator[]() : Section &
+overwrite() : void
+deprecatedClearSection() : void
+legacy() : void
+legacy() const : std::string
+had_trailing_comments() const : bool
#build() : void
}
class "NetClock" as C_0000673331345305095894
class C_0000673331345305095894 {
+NetClock() = default : void
{static} +is_steady : const bool
}
class "base_uint<256>" as C_0000434356742846908842
class C_0000434356742846908842 {
}
class "PublicKey" as C_0000572563999667803355
class C_0000572563999667803355 {
+PublicKey() = default : void
+PublicKey() : void
+operator=() : PublicKey &
+PublicKey() : void
+data() const : const std::uint8_t *
+size() const : std::size_t
+begin() const : PublicKey::const_iterator
+cbegin() const : PublicKey::const_iterator
+end() const : PublicKey::const_iterator
+cend() const : PublicKey::const_iterator
+empty() const : bool
+slice() const : Slice
+operator Slice() const : Slice
#size_ : std::size_t
#buf_ : std::uint8_t [33]
}
class "PeerReservation" as C_0002275687013031780768
class C_0002275687013031780768 {
+toJson() const : Json::Value
+description : std::string
}
class "KeyEqual" as C_0000829128179390688524
class C_0000829128179390688524 {
+operator()() const : bool
}
class "PeerReservationTable" as C_0001902838475977806272
class C_0001902838475977806272 {
+PeerReservationTable() : void
+list() const : std::vector<PeerReservation>
+contains() : bool
+load() : bool
+insert_or_assign() : std::optional<PeerReservation>
+erase() : std::optional<PeerReservation>
}
abstract "Resource::Manager" as C_0002239834536044887777
abstract C_0002239834536044887777 {
#Manager() : void
{abstract} +~Manager() = 0 : void
{abstract} +newInboundEndpoint() = 0 : Resource::Consumer
{abstract} +newInboundEndpoint() = 0 : Resource::Consumer
{abstract} +newOutboundEndpoint() = 0 : Resource::Consumer
{abstract} +newUnlimitedEndpoint() = 0 : Resource::Consumer
{abstract} +exportConsumers() = 0 : Resource::Gossip
{abstract} +getJson() = 0 : Json::Value
{abstract} +getJson() = 0 : Json::Value
{abstract} +importConsumers() = 0 : void
}
class "Resource::Charge" as C_0000253637917185643600
class C_0000253637917185643600 {
+Charge() : void
+Charge() : void
+label() const : const std::string &
+cost() const : Resource::Charge::value_type
+to_string() const : std::string
+operator==() const : bool
+operator!=() const : bool
}
class "Resource::Consumer" as C_0000062221471159367414
class C_0000062221471159367414 {
+Consumer() : void
+~Consumer() : void
+Consumer() : void
+operator=() : Resource::Consumer &
+to_string() const : std::string
+isUnlimited() const : bool
+elevate() : void
+disposition() const : Resource::Disposition
+charge() : Resource::Disposition
+warn() : bool
+disconnect() : bool
+balance() : int
+entry() : Resource::Entry &
}
class "NodeStore::ShardInfo" as C_0001113216765856705435
class C_0001113216765856705435 {
+msgTimestamp() const : const NetClock::time_point &
+setMsgTimestamp() : void
+finalizedToString() const : std::string
+setFinalizedFromString() : bool
+finalized() const : const boost::icl::interval_set<std::uint32_t> &
+incompleteToString() const : std::string
+incomplete() const : const std::map<std::uint32_t,Incomplete> &
+update() : bool
+makeMessage() : protocol::TMPeerShardInfoV2
}
abstract "Application" as C_0000024089222317618888
abstract C_0000024089222317618888 {
{abstract} +getMasterMutex() = 0 : Application::MutexType &
+Application() : void
+~Application() = default : void
{abstract} +setup() = 0 : bool
{abstract} +start() = 0 : void
{abstract} +run() = 0 : void
{abstract} +signalStop() = 0 : void
{abstract} +checkSigs() const = 0 : bool
{abstract} +checkSigs() = 0 : void
{abstract} +isStopping() const = 0 : bool
{abstract} +logs() = 0 : Logs &
{abstract} +config() = 0 : Config &
{abstract} +getIOService() = 0 : boost::asio::io_service &
{abstract} +getCollectorManager() = 0 : CollectorManager &
{abstract} +getNodeFamily() = 0 : Family &
{abstract} +getShardFamily() = 0 : Family *
{abstract} +timeKeeper() = 0 : TimeKeeper &
{abstract} +getJobQueue() = 0 : JobQueue &
{abstract} +getTempNodeCache() = 0 : NodeCache &
{abstract} +cachedSLEs() = 0 : CachedSLEs &
{abstract} +getAmendmentTable() = 0 : AmendmentTable &
{abstract} +getHashRouter() = 0 : HashRouter &
{abstract} +getFeeTrack() = 0 : LoadFeeTrack &
{abstract} +getLoadManager() = 0 : LoadManager &
{abstract} +overlay() = 0 : Overlay &
{abstract} +getTxQ() = 0 : TxQ &
{abstract} +validators() = 0 : ValidatorList &
{abstract} +validatorSites() = 0 : ValidatorSite &
{abstract} +validatorManifests() = 0 : ManifestCache &
{abstract} +publisherManifests() = 0 : ManifestCache &
{abstract} +cluster() = 0 : Cluster &
{abstract} +peerReservations() = 0 : PeerReservationTable &
{abstract} +getValidations() = 0 : RCLValidations &
{abstract} +getNodeStore() = 0 : NodeStore::Database &
{abstract} +getShardStore() = 0 : NodeStore::DatabaseShard *
{abstract} +getShardArchiveHandler() = 0 : RPC::ShardArchiveHandler *
{abstract} +getInboundLedgers() = 0 : InboundLedgers &
{abstract} +getInboundTransactions() = 0 : InboundTransactions &
{abstract} +getAcceptedLedgerCache() = 0 : TaggedCache<uint256,AcceptedLedger> &
{abstract} +getLedgerMaster() = 0 : LedgerMaster &
{abstract} +getLedgerCleaner() = 0 : LedgerCleaner &
{abstract} +getLedgerReplayer() = 0 : LedgerReplayer &
{abstract} +getOPs() = 0 : NetworkOPs &
{abstract} +getOrderBookDB() = 0 : OrderBookDB &
{abstract} +getMasterTransaction() = 0 : TransactionMaster &
{abstract} +getPerfLog() = 0 : perf::PerfLog &
{abstract} +nodeIdentity() = 0 : const std::pair<PublicKey,SecretKey> &
{abstract} +getValidationPublicKey() const = 0 : const PublicKey &
{abstract} +getResourceManager() = 0 : Resource::Manager &
{abstract} +getPathRequests() = 0 : PathRequests &
{abstract} +getSHAMapStore() = 0 : SHAMapStore &
{abstract} +pendingSaves() = 0 : PendingSaves &
{abstract} +accountIDCache() const = 0 : const AccountIDCache &
{abstract} +openLedger() = 0 : OpenLedger &
{abstract} +openLedger() const = 0 : const OpenLedger &
{abstract} +getRelationalDatabase() = 0 : RelationalDatabase &
{abstract} +getIOLatency() = 0 : std::chrono::milliseconds
{abstract} +getReportingETL() = 0 : ReportingETL &
{abstract} +serverOkay() = 0 : bool
{abstract} +journal() = 0 : beast::Journal
{abstract} +fdRequired() const = 0 : int
{abstract} +getWalletDB() = 0 : DatabaseCon &
{abstract} +getMaxDisallowedLedger() = 0 : LedgerIndex
}
class "ClusterNode" as C_0000892415872017331513
class C_0000892415872017331513 {
+ClusterNode() : void
+ClusterNode() : void
+name() const : const std::string &
+getLoadFee() const : std::uint32_t
+getReportTime() const : NetClock::time_point
+identity() const : const PublicKey &
}
class "Cluster" as C_0000916272374745650890
class C_0000916272374745650890 {
+Cluster() : void
+member() const : std::optional<std::string>
+size() const : std::size_t
+update() : bool
+for_each() const : void
+load() : bool
}
class "Cluster::Comparator" as C_0001584003080455442291
class C_0001584003080455442291 {
+Comparator() = default : void
+operator()() const : bool
+operator()() const : bool
+operator()() const : bool
}
abstract "InboundLedgers" as C_0000271542537597816241
abstract C_0000271542537597816241 {
+~InboundLedgers() = default : void
{abstract} +acquire() = 0 : std::shared_ptr<const Ledger>
{abstract} +find() = 0 : std::shared_ptr<InboundLedger>
{abstract} +gotLedgerData() = 0 : bool
{abstract} +gotStaleData() = 0 : void
{abstract} +logFailure() = 0 : void
{abstract} +isFailure() = 0 : bool
{abstract} +clearFailures() = 0 : void
{abstract} +getInfo() = 0 : Json::Value
{abstract} +fetchRate() = 0 : std::size_t
{abstract} +onLedgerFetched() = 0 : void
{abstract} +gotFetchPack() = 0 : void
{abstract} +sweep() = 0 : void
{abstract} +stop() = 0 : void
}
class "ValidatorList" as C_0000290153769275083926
class C_0000290153769275083926 {
+ValidatorList() : void
+~ValidatorList() = default : void
+load() : bool
{static} +parseBlobs() : std::vector<ValidatorBlobInfo>
{static} +parseBlobs() : std::vector<ValidatorBlobInfo>
{static} +parseBlobs() : std::vector<ValidatorBlobInfo>
{static} +sendValidatorList() : void
{static} +buildValidatorListMessages() : std::pair<std::size_t,std::size_t>
+applyListsAndBroadcast() : ValidatorList::PublisherListStats
+applyLists() : ValidatorList::PublisherListStats
+loadLists() : std::vector<std::string>
+updateTrusted() : TrustChanges
+quorum() const : std::size_t
+trusted() const : bool
+listed() const : bool
+getTrustedKey() const : std::optional<PublicKey>
+getListedKey() const : std::optional<PublicKey>
+trustedPublisher() const : bool
+localPublicKey() const : PublicKey
+for_each_listed() const : void
+for_each_available() const : void
+getAvailable() : std::optional<Json::Value>
+count() const : std::size_t
+expires() const : std::optional<TimeKeeper::time_point>
+getJson() const : Json::Value
+getQuorumKeys() const : ValidatorList::QuorumKeys
+getTrustedMasterKeys() const : std::unordered_set<PublicKey>
+getNegativeUNL() const : std::unordered_set<PublicKey>
+setNegativeUNL() : void
+negativeUNLFilter() const : std::vector<std::shared_ptr<STValidation>>
}
class "Ledger" as C_0000364313548677557109
class C_0000364313548677557109 {
+Ledger() : void
+operator=() : Ledger &
+Ledger() : void
+Ledger() : void
+Ledger() : void
+Ledger() : void
+Ledger() : void
+~Ledger() = default : void
+open() const : bool
+info() const : const LedgerInfo &
+setLedgerInfo() : void
+fees() const : const Fees &
+rules() const : const Rules &
+exists() const : bool
+exists() const : bool
+succ() const : std::optional<uint256>
+read() const : std::shared_ptr<const SLE>
+slesBegin() const : std::unique_ptr<sles_type::iter_base>
+slesEnd() const : std::unique_ptr<sles_type::iter_base>
+slesUpperBound() const : std::unique_ptr<sles_type::iter_base>
+txsBegin() const : std::unique_ptr<txs_type::iter_base>
+txsEnd() const : std::unique_ptr<txs_type::iter_base>
+txExists() const : bool
+txRead() const : ReadView::tx_type
+digest() const : std::optional<digest_type>
+rawErase() : void
+rawInsert() : void
+rawErase() : void
+rawReplace() : void
+rawDestroyXRP() : void
+rawTxInsert() : void
+rawTxInsertWithHash() : uint256
+setValidated() const : void
+setAccepted() : void
+setImmutable() : void
+isImmutable() const : bool
+setFull() const : void
+setTotalDrops() : void
+stateMap() const : const SHAMap &
+stateMap() : SHAMap &
+txMap() const : const SHAMap &
+txMap() : SHAMap &
+addSLE() : bool
+updateSkipList() : void
+walkLedger() const : bool
+assertSensible() const : bool
+invariants() const : void
+unshare() const : void
+negativeUNL() const : std::unordered_set<PublicKey>
+validatorToDisable() const : std::optional<PublicKey>
+validatorToReEnable() const : std::optional<PublicKey>
+updateNegativeUNL() : void
+isFlagLedger() const : bool
+isVotingLedger() const : bool
+peek() const : std::shared_ptr<SLE>
}
abstract "Overlay" as C_0001211946976677894711
abstract C_0001211946976677894711 {
#Overlay() : void
+~Overlay() = default : void
+start() : void
+stop() : void
{abstract} +onHandoff() = 0 : Handoff
{abstract} +connect() = 0 : void
{abstract} +limit() = 0 : int
{abstract} +size() const = 0 : std::size_t
{abstract} +json() = 0 : Json::Value
{abstract} +getActivePeers() const = 0 : Overlay::PeerSequence
{abstract} +checkTracking() = 0 : void
{abstract} +findPeerByShortID() const = 0 : std::shared_ptr<Peer>
{abstract} +findPeerByPublicKey() = 0 : std::shared_ptr<Peer>
{abstract} +broadcast() = 0 : void
{abstract} +broadcast() = 0 : void
{abstract} +relay() = 0 : std::set<Peer::id_t>
{abstract} +relay() = 0 : std::set<Peer::id_t>
{abstract} +relay() = 0 : void
{abstract} +incJqTransOverflow() = 0 : void
{abstract} +getJqTransOverflow() const = 0 : std::uint64_t
{abstract} +incPeerDisconnect() = 0 : void
{abstract} +getPeerDisconnect() const = 0 : std::uint64_t
{abstract} +incPeerDisconnectCharges() = 0 : void
{abstract} +getPeerDisconnectCharges() const = 0 : std::uint64_t
{abstract} +crawlShards() = 0 : Json::Value
{abstract} +networkID() const = 0 : std::optional<std::uint32_t>
{abstract} +txMetrics() const = 0 : Json::Value
+foreach() : void
}
abstract "InboundTransactions" as C_0001368347001801858838
abstract C_0001368347001801858838 {
+InboundTransactions() = default : void
+InboundTransactions() : void
+operator=() : InboundTransactions &
{abstract} +~InboundTransactions() = 0 : void
{abstract} +getSet() = 0 : std::shared_ptr<SHAMap>
{abstract} +gotData() = 0 : void
{abstract} +giveSet() = 0 : void
{abstract} +newRound() = 0 : void
{abstract} +stop() = 0 : void
}
class "DatabaseCon" as C_0001720628919043616139
class C_0001720628919043616139 {
+~DatabaseCon() : void
+getSession() : soci::session &
+checkoutDb() : LockedSociSession
+DatabaseCon() : void
+DatabaseCon() : void
+DatabaseCon() : void
+DatabaseCon() : void
}
class "LedgerMaster" as C_0002246434513325121300
class C_0002246434513325121300 {
+LedgerMaster() : void
+~LedgerMaster() = default : void
+getCurrentLedgerIndex() : LedgerIndex
+getValidLedgerIndex() : LedgerIndex
+isCompatible() : bool
+peekMutex() : std::recursive_mutex &
+getCurrentLedger() : std::shared_ptr<const ReadView>
+getClosedLedger() : std::shared_ptr<const Ledger>
+getValidatedLedger() : std::shared_ptr<const Ledger>
+getValidatedRules() : Rules
+getPublishedLedger() : std::shared_ptr<const ReadView>
+getPublishedLedgerAge() : std::chrono::seconds
+getValidatedLedgerAge() : std::chrono::seconds
+isCaughtUp() : bool
+getEarliestFetch() : std::uint32_t
+storeLedger() : bool
+setFullLedger() : void
+canBeCurrent() : bool
+switchLCL() : void
+failedSave() : void
+getCompleteLedgers() : std::string
+applyHeldTransactions() : void
+popAcctTransaction() : std::shared_ptr<const STTx>
+getHashBySeq() : uint256
+walkHashBySeq() : std::optional<LedgerHash>
+walkHashBySeq() : std::optional<LedgerHash>
+getLedgerBySeq() : std::shared_ptr<const Ledger>
+getLedgerByHash() : std::shared_ptr<const Ledger>
+setLedgerRangePresent() : void
+getCloseTimeBySeq() : std::optional<NetClock::time_point>
+getCloseTimeByHash() : std::optional<NetClock::time_point>
+addHeldTransaction() : void
+fixMismatch() : void
+haveLedger() : bool
+clearLedger() : void
+getValidatedRange() : bool
+getFullValidatedRange() : bool
+sweep() : void
+getCacheHitRate() : float
+checkAccept() : void
+checkAccept() : void
+consensusBuilt() : void
+setBuildingLedger() : void
+tryAdvance() : void
+newPathRequest() : bool
+isNewPathRequest() : bool
+newOrderBookDB() : bool
+fixIndex() : bool
+clearPriorLedgers() : void
+clearLedgerCachePrior() : void
+takeReplay() : void
+releaseReplay() : std::unique_ptr<LedgerReplay>
+gotFetchPack() : void
+addFetchPack() : void
+getFetchPack() : std::optional<Blob>
+makeFetchPack() : void
+getFetchPackCacheSize() const : std::size_t
+haveValidated() : bool
+minSqlSeq() : std::optional<LedgerIndex>
}
class "STTx" as C_0001059260590421798558
class C_0001059260590421798558 {
{static} +maxMultiSigners() : std::size_t
+STTx() : void
+STTx() = default : void
+operator=() : STTx &
+STTx() : void
+STTx() : void
+STTx() : void
+STTx() : void
+getSType() const : SerializedTypeID
+getFullText() const : std::string
+getSignature() const : Blob
+getSigningHash() const : uint256
+getTxnType() const : TxType
+getSigningPubKey() const : Blob
+getSeqProxy() const : SeqProxy
+getMentionedAccounts() const : boost::container::flat_set<AccountID>
+getTransactionID() const : uint256
+getJson() const : Json::Value
+getJson() const : Json::Value
+sign() : void
+checkSign() const : Expected<void,std::string>
{static} +getMetaSQLInsertReplaceHeader() : const std::string &
+getMetaSQL() const : std::string
+getMetaSQL() const : std::string
{static} +minMultiSigners : const std::size_t
}
class "LoadEvent" as C_0001354813340857466867
class C_0001354813340857466867 {
+LoadEvent() : void
+LoadEvent() : void
+~LoadEvent() : void
+name() const : const std::string &
+waitTime() const : std::chrono::steady_clock::duration
+runTime() const : std::chrono::steady_clock::duration
+setName() : void
+start() : void
+stop() : void
}
enum "compression::Algorithm" as C_0000580187917032083572
enum C_0000580187917032083572 {
None
LZ4
}
enum "compression::Compressed" as C_0001319433810047029934
enum C_0001319433810047029934 {
On
Off
}
class "Message" as C_0000073086002242562289
class C_0000073086002242562289 {
+Message() : void
+getBufferSize() : std::size_t
{static} +messageSize() : std::size_t
{static} +totalSize() : std::size_t
+getBuffer() : const std::vector<uint8_t> &
+getCategory() const : std::size_t
+getValidatorKey() const : const std::optional<PublicKey> &
}
enum "ProtocolFeature" as C_0000597866093600558476
enum C_0000597866093600558476 {
ValidatorListPropagation
ValidatorList2Propagation
LedgerReplay
}
abstract "Peer" as C_0000175546699848340697
abstract C_0000175546699848340697 {
+~Peer() = default : void
{abstract} +send() = 0 : void
{abstract} +getRemoteAddress() const = 0 : beast::IP::Endpoint
{abstract} +sendTxQueue() = 0 : void
{abstract} +addTxQueue() = 0 : void
{abstract} +removeTxQueue() = 0 : void
{abstract} +charge() = 0 : void
{abstract} +id() const = 0 : Peer::id_t
{abstract} +cluster() const = 0 : bool
{abstract} +isHighLatency() const = 0 : bool
{abstract} +getScore() const = 0 : int
{abstract} +getNodePublic() const = 0 : const PublicKey &
{abstract} +json() = 0 : Json::Value
{abstract} +supportsFeature() const = 0 : bool
{abstract} +publisherListSequence() const = 0 : std::optional<std::size_t>
{abstract} +setPublisherListSequence() = 0 : void
{abstract} +getClosedLedgerHash() const = 0 : const uint256 &
{abstract} +hasLedger() const = 0 : bool
{abstract} +ledgerRange() const = 0 : void
{abstract} +hasTxSet() const = 0 : bool
{abstract} +cycleStatus() = 0 : void
{abstract} +hasRange() = 0 : bool
{abstract} +compressionEnabled() const = 0 : bool
{abstract} +txReduceRelayEnabled() const = 0 : bool
}
abstract "PeerSet" as C_0000478678506029225167
abstract C_0000478678506029225167 {
+~PeerSet() = default : void
{abstract} +addPeers() = 0 : void
{abstract} +sendRequest() = 0 : void
{abstract} +getPeerIds() const = 0 : const std::set<Peer::id_t> &
+sendRequest() : void
}
class "InboundLedger" as C_0001323284880194368582
class C_0001323284880194368582 {
+InboundLedger() : void
+~InboundLedger() : void
+update() : void
+isComplete() const : bool
+isFailed() const : bool
+getLedger() const : std::shared_ptr<const Ledger>
+getSeq() const : std::uint32_t
+checkLocal() : bool
+init() : void
+gotData() : bool
+getJson() : Json::Value
+runData() : void
+touch() : void
+getLastAction() const : clock_type::time_point
}
class "STValidation" as C_0002269358254410900972
class C_0002269358254410900972 {
+getLedgerHash() const : uint256
+getConsensusHash() const : uint256
+getSignTime() const : NetClock::time_point
+getSeenTime() const : NetClock::time_point
+getSignerPublic() const : const PublicKey &
+getNodeID() const : const NodeID &
+isValid() const : bool
+isFull() const : bool
+isTrusted() const : bool
+getSigningHash() const : uint256
+setTrusted() : void
+setUntrusted() : void
+setSeen() : void
+getSerialized() const : Blob
+getSignature() const : Blob
+STValidation() : void
+STValidation() : void
}
class "RCLCxPeerPos" as C_0001803146778207729429
class C_0001803146778207729429 {
+RCLCxPeerPos() : void
+signingHash() const : uint256
+checkSign() const : bool
+signature() const : Slice
+publicKey() const : const PublicKey &
+suppressionID() const : const uint256 &
+proposal() const : const RCLCxPeerPos::Proposal &
+getJson() const : Json::Value
}
class "ValidatorBlobInfo" as C_0000291438652713848856
class C_0000291438652713848856 {
+blob : std::string
+signature : std::string
+manifest : std::optional<std::string>
}
class "ValidatorList::MessageWithHash" as C_0000887511781120970821
class C_0000887511781120970821 {
+MessageWithHash() = default : void
+MessageWithHash() : void
+numVLs : std::size_t
}
abstract "PeerFinder::Slot" as C_0002039135395342803340
abstract C_0002039135395342803340 {
{abstract} +~Slot() = 0 : void
{abstract} +inbound() const = 0 : bool
{abstract} +fixed() const = 0 : bool
{abstract} +reserved() const = 0 : bool
{abstract} +state() const = 0 : PeerFinder::Slot::State
{abstract} +remote_endpoint() const = 0 : const beast::IP::Endpoint &
{abstract} +local_endpoint() const = 0 : const std::optional<beast::IP::Endpoint> &
{abstract} +listening_port() const = 0 : std::optional<std::uint16_t>
{abstract} +public_key() const = 0 : const std::optional<PublicKey> &
}
abstract "PeerFinder::Manager" as C_0000410889634548511449
abstract C_0000410889634548511449 {
#Manager() : void
+~Manager() = default : void
{abstract} +setConfig() = 0 : void
{abstract} +start() = 0 : void
{abstract} +stop() = 0 : void
{abstract} +config() = 0 : PeerFinder::Config
{abstract} +addFixedPeer() = 0 : void
{abstract} +addFallbackStrings() = 0 : void
{abstract} +new_inbound_slot() = 0 : std::shared_ptr<Slot>
{abstract} +new_outbound_slot() = 0 : std::shared_ptr<Slot>
{abstract} +on_endpoints() = 0 : void
{abstract} +on_closed() = 0 : void
{abstract} +on_failure() = 0 : void
{abstract} +onRedirects() = 0 : void
{abstract} +onConnected() = 0 : bool
{abstract} +activate() = 0 : PeerFinder::Result
{abstract} +redirect() = 0 : std::vector<Endpoint>
{abstract} +autoconnect() = 0 : std::vector<beast::IP::Endpoint>
{abstract} +buildEndpointsForPeers() = 0 : std::vector<std::pair<std::shared_ptr<Slot>,std::vector<Endpoint>>>
{abstract} +once_per_second() = 0 : void
}
class "Handoff" as C_0001170741470033071523
class C_0001170741470033071523 {
+handled() const : bool
+moved : bool
+keep_alive : bool
}
abstract "Resolver" as C_0001927026177791066667
abstract C_0001927026177791066667 {
{abstract} +~Resolver() = 0 : void
{abstract} +stop_async() = 0 : void
{abstract} +stop() = 0 : void
{abstract} +start() = 0 : void
{abstract} +resolve() = 0 : void
+resolve() : void
}
enum "Overlay::Promote" as C_0002252996027946078688
enum C_0002252996027946078688 {
automatic
never
always
}
class "Overlay::Setup" as C_0001376469779490050202
class C_0001376469779490050202 {
+Setup() = default : void
+context : std::shared_ptr<boost::asio::ssl::context>
+public_ip : beast::IP::Address
+ipLimit : int
+crawlOptions : std::uint32_t
+networkID : std::optional<std::uint32_t>
+vlEnabled : bool
}
class "reduce_relay::Slots<UptimeClock>" as C_0001849220577751001920
class C_0001849220577751001920 {
}
class "reduce_relay::Squelch<UptimeClock>" as C_0001668540836965143527
class C_0001668540836965143527 {
}
class "TrafficCount" as C_0000695798640095218486
class C_0000695798640095218486 {
{static} +categorize() : TrafficCount::category
+addCount() : void
+TrafficCount() = default : void
+getCounts() const : const std::array<TrafficCount::TrafficStats,49> &
#counts_ : std::array<TrafficStats,category::unknown + 1>
}
class "TrafficCount::TrafficStats" as C_0000233420341203379500
class C_0000233420341203379500 {
+TrafficStats() : void
+TrafficStats() : void
+operator bool() const : bool
+name : const char *
+bytesIn : std::atomic<std::uint64_t>
+bytesOut : std::atomic<std::uint64_t>
+messagesIn : std::atomic<std::uint64_t>
+messagesOut : std::atomic<std::uint64_t>
}
enum "TrafficCount::category" as C_0001150288240114423957
enum C_0001150288240114423957 {
base
cluster
overlay
manifests
transaction
proposal
validation
validatorlist
shards
get_set
share_set
ld_tsc_get
ld_tsc_share
ld_txn_get
ld_txn_share
ld_asn_get
ld_asn_share
ld_get
ld_share
gl_tsc_share
gl_tsc_get
gl_txn_share
gl_txn_get
gl_asn_share
gl_asn_get
gl_share
gl_get
share_hash_ledger
get_hash_ledger
share_hash_tx
get_hash_tx
share_hash_txnode
get_hash_txnode
share_hash_asnode
get_hash_asnode
share_cas_object
get_cas_object
share_fetch_pack
get_fetch_pack
get_transactions
share_hash
get_hash
proof_path_request
proof_path_response
replay_delta_request
replay_delta_response
have_transactions
requested_transactions
unknown
}
class "ServerHandlerImp" as C_0001673046963523766836
class C_0001673046963523766836 {
+ServerHandlerImp() : void
+~ServerHandlerImp() : void
+setup() : void
+setup() const : const ServerHandlerImp::Setup &
+stop() : void
+onAccept() : bool
+onHandoff() : Handoff
+onHandoff() : Handoff
+onRequest() : void
+onWSMessage() : void
+onClose() : void
+onStopped() : void
}
class "OverlayImpl" as C_0001116672667747658761
class C_0001116672667747658761 {
+OverlayImpl() : void
+OverlayImpl() : void
+operator=() : OverlayImpl &
+start() : void
+stop() : void
+peerFinder() : PeerFinder::Manager &
+resourceManager() : Resource::Manager &
+setup() const : const Overlay::Setup &
+onHandoff() : Handoff
+connect() : void
+limit() : int
+size() const : std::size_t
+json() : Json::Value
+getActivePeers() const : Overlay::PeerSequence
+getActivePeers() const : Overlay::PeerSequence
+checkTracking() : void
+findPeerByShortID() const : std::shared_ptr<Peer>
+findPeerByPublicKey() : std::shared_ptr<Peer>
+broadcast() : void
+broadcast() : void
+relay() : std::set<Peer::id_t>
+relay() : std::set<Peer::id_t>
+relay() : void
+getManifestsMessage() : std::shared_ptr<Message>
+add_active() : void
+remove() : void
+activate() : void
+onPeerDeactivate() : void
+onManifests() : void
{static} +isPeerUpgrade() : bool
{static} +makePrefix() : std::string
+reportTraffic() : void
+incJqTransOverflow() : void
+getJqTransOverflow() const : std::uint64_t
+incPeerDisconnect() : void
+getPeerDisconnect() const : std::uint64_t
+incPeerDisconnectCharges() : void
+getPeerDisconnectCharges() const : std::uint64_t
+networkID() const : std::optional<std::uint32_t>
+crawlShards() : Json::Value
+endOfPeerChain() : void
+updateSlotAndSquelch() : void
+updateSlotAndSquelch() : void
+deletePeer() : void
+txMetrics() const : Json::Value
+for_each() : void
{static} +isPeerUpgrade() : _Bool
{static} +is_upgrade() : _Bool
{static} +is_upgrade() : _Bool
+addTxMetrics() : void
}
abstract "OverlayImpl::Child" as C_0002010245539016986734
abstract C_0002010245539016986734 {
#Child() : void
#~Child() : void
{abstract} +stop() = 0 : void
}
class "OverlayImpl::Timer" as C_0002297746583963509669
class C_0002297746583963509669 {
+Timer() : void
+stop() : void
+async_wait() : void
+on_timer() : void
+timer_ : boost::asio::basic_waitable_timer<clock_type>
+stopping_ : bool
}
class "OverlayImpl::TrafficGauges" as C_0000054193141120508510
class C_0000054193141120508510 {
+TrafficGauges() : void
+bytesIn : beast::insight::Gauge
+bytesOut : beast::insight::Gauge
+messagesIn : beast::insight::Gauge
+messagesOut : beast::insight::Gauge
}
class "OverlayImpl::Stats" as C_0001278985110087719735
class C_0001278985110087719735 {
+Stats() : void
+peerDisconnects : beast::insight::Gauge
+trafficGauges : std::vector<TrafficGauges>
+hook : beast::insight::Hook
}
class "ConnectAttempt" as C_0000757436170027758970
class C_0000757436170027758970 {
+ConnectAttempt() : void
+~ConnectAttempt() : void
+stop() : void
+run() : void
}
class "LedgerReplayMsgHandler" as C_0000567800362104935169
class C_0000567800362104935169 {
+LedgerReplayMsgHandler() : void
+~LedgerReplayMsgHandler() = default : void
+processProofPathRequest() : protocol::TMProofPathResponse
+processProofPathResponse() : bool
+processReplayDeltaRequest() : protocol::TMReplayDeltaResponse
+processReplayDeltaResponse() : bool
}
class "PeerImp" as C_0002118346084380460994
class C_0002118346084380460994 {
+PeerImp() : void
+operator=() : PeerImp &
+PeerImp() : void
+~PeerImp() : void
+pjournal() const : const beast::Journal &
+slot() : const std::shared_ptr<PeerFinder::Slot> &
+run() : void
+stop() : void
+send() : void
+sendTxQueue() : void
+addTxQueue() : void
+removeTxQueue() : void
+getRemoteAddress() const : beast::IP::Endpoint
+charge() : void
+id() const : Peer::id_t
+crawl() const : bool
+cluster() const : bool
+checkTracking() : void
+checkTracking() : void
+getNodePublic() const : const PublicKey &
+getVersion() const : std::string
+uptime() const : clock_type::duration
+json() : Json::Value
+supportsFeature() const : bool
+publisherListSequence() const : std::optional<std::size_t>
+setPublisherListSequence() : void
+getClosedLedgerHash() const : const uint256 &
+hasLedger() const : bool
+ledgerRange() const : void
+hasTxSet() const : bool
+cycleStatus() : void
+hasRange() : bool
+getScore() const : int
+isHighLatency() const : bool
+fail() : void
+getPeerShardInfos() const : const std::unordered_map<PublicKey,NodeStore::ShardInfo>
+compressionEnabled() const : bool
+txReduceRelayEnabled() const : bool
+onMessageUnknown() : void
+onMessageBegin() : void
+onMessageEnd() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+onMessage() : void
+PeerImp() : void
+sendEndpoints() : void
}
enum "PeerImp::Tracking" as C_0002249553558977949666
enum C_0002249553558977949666 {
diverged
unknown
converged
}
class "PeerImp::Metrics" as C_0002296195248578856147
class C_0002296195248578856147 {
+Metrics() = default : void
+Metrics() : void
+operator=() : PeerImp::Metrics &
+Metrics() : void
+operator=() : PeerImp::Metrics &
+add_message() : void
+average_bytes() const : std::uint64_t
+total_bytes() const : std::uint64_t
}
class "PeerImp::(metrics_)" as C_0000677430244216991964
class C_0000677430244216991964 {
+sent : PeerImp::Metrics
+recv : PeerImp::Metrics
}
class "send_always" as C_0002076690098760122686
class C_0002076690098760122686 {
+send_always() : void
+operator()() const : void
}
class "send_if_pred<Predicate>" as C_0000905326157301126614
class C_0000905326157301126614 {
+send_if_pred<Predicate>() : void
+operator()() const : void
+predicate : const Predicate &
}
class "send_if_not_pred<Predicate>" as C_0000170306987141809259
class C_0000170306987141809259 {
+send_if_not_pred<Predicate>() : void
+operator()() const : void
+predicate : const Predicate &
}
class "match_peer" as C_0000808235737127515291
class C_0000808235737127515291 {
+match_peer() : void
+operator()() const : bool
}
class "peer_in_cluster" as C_0000455099840103492839
class C_0000455099840103492839 {
+peer_in_cluster() : void
+operator()() const : bool
}
class "peer_in_set" as C_0000618873555097861320
class C_0000618873555097861320 {
+peer_in_set() : void
+operator()() const : bool
+peerSet : const std::set<Peer::id_t> &
}
class "PeerSetImpl" as C_0000163295584861602788
class C_0000163295584861602788 {
+PeerSetImpl() : void
+addPeers() : void
+sendRequest() : void
+getPeerIds() const : const std::set<Peer::id_t> &
}
class "DummyPeerSet" as C_0002106442376745625643
class C_0002106442376745625643 {
+DummyPeerSet() : void
+addPeers() : void
+sendRequest() : void
+getPeerIds() const : const std::set<Peer::id_t> &
}
C_0000523676121508856554 o-- C_0001196237645647586305 : -map_
C_0002275687013031780768 o-- C_0000572563999667803355 : +nodeId
C_0000829128179390688524 ..> C_0002275687013031780768
C_0001902838475977806272 ..> C_0000572563999667803355
C_0001902838475977806272 ..> C_0001720628919043616139
C_0001902838475977806272 ..> C_0002275687013031780768
C_0001902838475977806272 --> C_0001720628919043616139 : -connection_
C_0001902838475977806272 o-- C_0002275687013031780768 : -table_
C_0001902838475977806272 o-- C_0000829128179390688524 : -table_
C_0000062221471159367414 ..> C_0000253637917185643600
C_0001113216765856705435 ..> C_0000673331345305095894
C_0001113216765856705435 ..> C_0000024089222317618888
C_0001113216765856705435 o-- C_0000673331345305095894 : -msgTimestamp_
C_0000892415872017331513 ..> C_0000572563999667803355
C_0000892415872017331513 ..> C_0000673331345305095894
C_0000892415872017331513 o-- C_0000572563999667803355 : -identity_
C_0000892415872017331513 o-- C_0000673331345305095894 : -mReportTime
C_0000916272374745650890 ..> C_0000572563999667803355
C_0000916272374745650890 ..> C_0000673331345305095894
C_0000916272374745650890 ..> C_0000892415872017331513
C_0000916272374745650890 ..> C_0001196237645647586305
C_0000916272374745650890 o-- C_0000892415872017331513 : -nodes_
C_0001584003080455442291 --+ C_0000916272374745650890
C_0001584003080455442291 ..> C_0000892415872017331513
C_0001584003080455442291 ..> C_0000572563999667803355
C_0000271542537597816241 ..> C_0000434356742846908842
C_0000271542537597816241 ..> C_0000175546699848340697
C_0000290153769275083926 ..> C_0000572563999667803355
C_0000290153769275083926 ..> C_0000175546699848340697
C_0000290153769275083926 ..> C_0000291438652713848856
C_0000290153769275083926 ..> C_0000434356742846908842
C_0000290153769275083926 ..> C_0001211946976677894711
C_0000290153769275083926 ..> C_0000673331345305095894
C_0000290153769275083926 ..> C_0002269358254410900972
C_0000290153769275083926 o-- C_0000572563999667803355 : -publisherLists_
C_0000290153769275083926 o-- C_0000572563999667803355 : -keyListings_
C_0000290153769275083926 o-- C_0000572563999667803355 : -trustedMasterKeys_
C_0000290153769275083926 o-- C_0000572563999667803355 : -trustedSigningKeys_
C_0000290153769275083926 o-- C_0000572563999667803355 : -localPubKey_
C_0000290153769275083926 o-- C_0000572563999667803355 : -negativeUNL_
C_0000364313548677557109 ..> C_0000673331345305095894
C_0000364313548677557109 ..> C_0000434356742846908842
C_0001211946976677894711 ..> C_0000572563999667803355
C_0001211946976677894711 ..> C_0000434356742846908842
C_0001368347001801858838 ..> C_0000434356742846908842
C_0001368347001801858838 ..> C_0000175546699848340697
C_0002246434513325121300 ..> C_0000024089222317618888
C_0002246434513325121300 ..> C_0000364313548677557109
C_0002246434513325121300 ..> C_0000434356742846908842
C_0002246434513325121300 ..> C_0001059260590421798558
C_0002246434513325121300 ..> C_0000175546699848340697
C_0002246434513325121300 --> C_0000024089222317618888 : -app_
C_0002246434513325121300 --> C_0000364313548677557109 : -mPubLedger
C_0002246434513325121300 --> C_0000364313548677557109 : -mPathLedger
C_0002246434513325121300 --> C_0000364313548677557109 : -mHistLedger
C_0002246434513325121300 --> C_0000364313548677557109 : -mShardLedger
C_0002246434513325121300 o-- C_0000434356742846908842 : -mLastValidLedger
C_0002246434513325121300 o-- C_0000673331345305095894 : -upgradeWarningPrevTime_
C_0001059260590421798558 ..> C_0000572563999667803355
C_0001059260590421798558 o-- C_0000434356742846908842 : -tid_
C_0000073086002242562289 ..> C_0000572563999667803355
C_0000073086002242562289 ..> C_0001319433810047029934
C_0000073086002242562289 ..> C_0000580187917032083572
C_0000073086002242562289 o-- C_0000572563999667803355 : -validatorKey_
C_0000175546699848340697 ..> C_0000073086002242562289
C_0000175546699848340697 ..> C_0000434356742846908842
C_0000175546699848340697 ..> C_0000253637917185643600
C_0000175546699848340697 ..> C_0000597866093600558476
C_0000175546699848340697 ..> C_0000572563999667803355
C_0000478678506029225167 ..> C_0000175546699848340697
C_0001323284880194368582 ..> C_0000024089222317618888
C_0001323284880194368582 ..> C_0000434356742846908842
C_0001323284880194368582 ..> C_0000478678506029225167
C_0001323284880194368582 ..> C_0000175546699848340697
C_0001323284880194368582 --> C_0000364313548677557109 : -mLedger
C_0001323284880194368582 o-- C_0000434356742846908842 : -mRecentNodes
C_0001323284880194368582 o-- C_0000175546699848340697 : -mReceivedData
C_0001323284880194368582 o-- C_0000478678506029225167 : -mPeerSet
C_0002269358254410900972 ..> C_0000673331345305095894
C_0002269358254410900972 ..> C_0000572563999667803355
C_0002269358254410900972 o-- C_0000572563999667803355 : -signingPubKey_
C_0002269358254410900972 o-- C_0000673331345305095894 : -seenTime_
C_0001803146778207729429 ..> C_0000572563999667803355
C_0001803146778207729429 ..> C_0000434356742846908842
C_0000887511781120970821 --+ C_0000290153769275083926
C_0000887511781120970821 ..> C_0000073086002242562289
C_0000887511781120970821 ..> C_0000434356742846908842
C_0000887511781120970821 --> C_0000073086002242562289 : +message
C_0000887511781120970821 o-- C_0000434356742846908842 : +hash
C_0000410889634548511449 ..> C_0002039135395342803340
C_0000410889634548511449 ..> C_0000572563999667803355
C_0002252996027946078688 --+ C_0001211946976677894711
C_0001376469779490050202 --+ C_0001211946976677894711
C_0000233420341203379500 --+ C_0000695798640095218486
C_0001150288240114423957 --+ C_0000695798640095218486
C_0001673046963523766836 ..> C_0000024089222317618888
C_0001673046963523766836 ..> C_0002239834536044887777
C_0001673046963523766836 --> C_0000024089222317618888 : -app_
C_0001673046963523766836 --> C_0002239834536044887777 : -m_resourceManager
C_0001116672667747658761 ..> C_0000024089222317618888
C_0001116672667747658761 ..> C_0001673046963523766836
C_0001116672667747658761 ..> C_0002239834536044887777
C_0001116672667747658761 ..> C_0001927026177791066667
C_0001116672667747658761 ..> C_0000523676121508856554
C_0001116672667747658761 ..> C_0000572563999667803355
C_0001116672667747658761 ..> C_0000434356742846908842
C_0001116672667747658761 ..> C_0002118346084380460994
C_0001116672667747658761 ..> C_0002039135395342803340
C_0001116672667747658761 ..> C_0001170741470033071523
C_0001116672667747658761 --> C_0000024089222317618888 : -app_
C_0001116672667747658761 --> C_0001673046963523766836 : -serverHandler_
C_0001116672667747658761 --> C_0002239834536044887777 : -m_resourceManager
C_0001116672667747658761 o-- C_0000410889634548511449 : -m_peerFinder
C_0001116672667747658761 o-- C_0000695798640095218486 : -m_traffic
C_0001116672667747658761 o-- C_0002039135395342803340 : -m_peers
C_0001116672667747658761 o-- C_0002118346084380460994 : -m_peers
C_0001116672667747658761 o-- C_0002118346084380460994 : -ids_
C_0001116672667747658761 --> C_0001927026177791066667 : -m_resolver
C_0001116672667747658761 o-- C_0001849220577751001920 : -slots_
C_0001116672667747658761 --> C_0000073086002242562289 : -manifestMessage_
C_0001211946976677894711 <|-- C_0001116672667747658761
C_0002010245539016986734 --+ C_0001116672667747658761
C_0002010245539016986734 ..> C_0001116672667747658761
C_0002010245539016986734 --> C_0001116672667747658761 : #overlay_
C_0002297746583963509669 --+ C_0001116672667747658761
C_0002297746583963509669 ..> C_0001116672667747658761
C_0000054193141120508510 --+ C_0001116672667747658761
C_0001278985110087719735 --+ C_0001116672667747658761
C_0000757436170027758970 ..> C_0000024089222317618888
C_0000757436170027758970 ..> C_0000062221471159367414
C_0000757436170027758970 ..> C_0002039135395342803340
C_0000757436170027758970 ..> C_0001116672667747658761
C_0000757436170027758970 --> C_0000024089222317618888 : -app_
C_0000757436170027758970 o-- C_0000062221471159367414 : -usage_
C_0000757436170027758970 --> C_0002039135395342803340 : -slot_
C_0000567800362104935169 ..> C_0000024089222317618888
C_0000567800362104935169 --> C_0000024089222317618888 : -app_
C_0002118346084380460994 ..> C_0000024089222317618888
C_0002118346084380460994 ..> C_0002039135395342803340
C_0002118346084380460994 ..> C_0000572563999667803355
C_0002118346084380460994 ..> C_0000062221471159367414
C_0002118346084380460994 ..> C_0001116672667747658761
C_0002118346084380460994 ..> C_0000073086002242562289
C_0002118346084380460994 ..> C_0000434356742846908842
C_0002118346084380460994 ..> C_0000253637917185643600
C_0002118346084380460994 ..> C_0000597866093600558476
C_0002118346084380460994 ..> C_0000291438652713848856
C_0002118346084380460994 ..> C_0001059260590421798558
C_0002118346084380460994 ..> C_0001803146778207729429
C_0002118346084380460994 ..> C_0002269358254410900972
C_0002118346084380460994 ..> C_0000364313548677557109
C_0002118346084380460994 --> C_0000024089222317618888 : -app_
C_0002118346084380460994 --> C_0001116672667747658761 : -overlay_
C_0002118346084380460994 o-- C_0000572563999667803355 : -publicKey_
C_0002118346084380460994 o-- C_0000434356742846908842 : -closedLedgerHash_
C_0002118346084380460994 o-- C_0000434356742846908842 : -previousLedgerHash_
C_0002118346084380460994 o-- C_0000434356742846908842 : -recentLedgers_
C_0002118346084380460994 o-- C_0000434356742846908842 : -recentTxSets_
C_0002118346084380460994 o-- C_0001668540836965143527 : -squelch_
C_0002118346084380460994 o-- C_0000062221471159367414 : -usage_
C_0002118346084380460994 o-- C_0000253637917185643600 : -fee_
C_0002118346084380460994 o-- C_0002039135395342803340 : -slot_
C_0002118346084380460994 o-- C_0000073086002242562289 : -send_queue_
C_0002118346084380460994 o-- C_0001354813340857466867 : -load_event_
C_0002118346084380460994 o-- C_0000572563999667803355 : -publisherListSequences_
C_0002118346084380460994 o-- C_0000572563999667803355 : -shardInfos_
C_0002118346084380460994 o-- C_0001113216765856705435 : -shardInfos_
C_0002118346084380460994 o-- C_0001319433810047029934 : -compressionEnabled_
C_0002118346084380460994 o-- C_0000567800362104935169 : -ledgerReplayMsgHandler_
C_0002118346084380460994 <.. C_0001116672667747658761 : +<<friend>>
C_0002118346084380460994 o-- C_0000677430244216991964 : -metrics_
C_0000175546699848340697 <|-- C_0002118346084380460994
C_0002249553558977949666 --+ C_0002118346084380460994
C_0002296195248578856147 --+ C_0002118346084380460994
C_0002076690098760122686 ..> C_0000073086002242562289
C_0002076690098760122686 ..> C_0000175546699848340697
C_0002076690098760122686 --> C_0000073086002242562289 : +msg
C_0000905326157301126614 ..> C_0000073086002242562289
C_0000905326157301126614 ..> C_0000175546699848340697
C_0000905326157301126614 --> C_0000073086002242562289 : +msg
C_0000170306987141809259 ..> C_0000073086002242562289
C_0000170306987141809259 ..> C_0000175546699848340697
C_0000170306987141809259 --> C_0000073086002242562289 : +msg
C_0000808235737127515291 ..> C_0000175546699848340697
C_0000808235737127515291 --> C_0000175546699848340697 : +matchPeer
C_0000455099840103492839 ..> C_0000175546699848340697
C_0000455099840103492839 o-- C_0000808235737127515291 : +skipPeer
C_0000618873555097861320 ..> C_0000175546699848340697
C_0000163295584861602788 ..> C_0000024089222317618888
C_0000163295584861602788 ..> C_0000175546699848340697
C_0000163295584861602788 --> C_0000024089222317618888 : -app_
C_0000478678506029225167 <|-- C_0000163295584861602788
C_0002106442376745625643 ..> C_0000024089222317618888
C_0002106442376745625643 ..> C_0000175546699848340697
C_0000478678506029225167 <|-- C_0002106442376745625643
@enduml

# Auto-generated by asn1ate v.0.5.1.dev from appendix_c.asn1
# (last modified on 2017-04-24 16:44:58.756111)

from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class ConditionTypes(univ.BitString):
    pass


ConditionTypes.namedValues = namedval.NamedValues(
    ('preImageSha256', 0), ('prefixSha256', 1), ('thresholdSha256', 2),
    ('rsaSha256', 3), ('ed25519Sha256', 4))


class CompoundSha256Condition(univ.Sequence):
    pass


CompoundSha256Condition.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'fingerprint',
        univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(
            32, 32)).subtype(implicitTag=tag.Tag(tag.tagClassContext,
                                                 tag.tagFormatSimple, 0))),
    namedtype.NamedType(
        'cost',
        univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(
            0, 4294967295)).subtype(implicitTag=tag.Tag(
                tag.tagClassContext, tag.tagFormatSimple, 1))),
    namedtype.NamedType(
        'subtypes',
        ConditionTypes().subtype(implicitTag=tag.Tag(tag.tagClassContext,
                                                     tag.tagFormatSimple, 2))))


class SimpleSha256Condition(univ.Sequence):
    pass


SimpleSha256Condition.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'fingerprint',
        univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(
            32, 32)).subtype(implicitTag=tag.Tag(tag.tagClassContext,
                                                 tag.tagFormatSimple, 0))),
    namedtype.NamedType(
        'cost',
        univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(
            0, 4294967295)).subtype(implicitTag=tag.Tag(
                tag.tagClassContext, tag.tagFormatSimple, 1))))


class Condition(univ.Choice):
    pass


Condition.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'preimageSha256',
        SimpleSha256Condition().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 0))),
    namedtype.NamedType(
        'prefixSha256',
        CompoundSha256Condition().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 1))),
    namedtype.NamedType(
        'thresholdSha256',
        CompoundSha256Condition().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 2))),
    namedtype.NamedType(
        'rsaSha256',
        SimpleSha256Condition().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 3))),
    namedtype.NamedType(
        'ed25519Sha256',
        SimpleSha256Condition().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 4))))


class Ed25519FingerprintContents(univ.Sequence):
    pass


Ed25519FingerprintContents.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'publicKey',
        univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(
            32, 32)).subtype(implicitTag=tag.Tag(tag.tagClassContext,
                                                 tag.tagFormatSimple, 0))))


class Ed25519Sha512Fulfillment(univ.Sequence):
    pass


Ed25519Sha512Fulfillment.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'publicKey',
        univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(
            32, 32)).subtype(implicitTag=tag.Tag(tag.tagClassContext,
                                                 tag.tagFormatSimple, 0))),
    namedtype.NamedType(
        'signature',
        univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(
            64, 64)).subtype(implicitTag=tag.Tag(tag.tagClassContext,
                                                 tag.tagFormatSimple, 1))))


class RsaSha256Fulfillment(univ.Sequence):
    pass


RsaSha256Fulfillment.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'modulus',
        univ.OctetString().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType(
        'signature',
        univ.OctetString().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 1))))


class PreimageFulfillment(univ.Sequence):
    pass


PreimageFulfillment.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'preimage',
        univ.OctetString().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 0))))


class PrefixFulfillment(univ.Sequence):
    pass


class ThresholdFulfillment(univ.Sequence):
    pass


class Fulfillment(univ.Choice):
    pass


PrefixFulfillment.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'prefix',
        univ.OctetString().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType(
        'maxMessageLength',
        univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(
            0, 4294967295)).subtype(implicitTag=tag.Tag(
                tag.tagClassContext, tag.tagFormatSimple, 1))),
    namedtype.NamedType(
        'subfulfillment',
        Fulfillment().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 2))))

ThresholdFulfillment.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'subfulfillments',
        univ.SetOf(componentType=Fulfillment()).subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType(
        'subconditions',
        univ.SetOf(componentType=Condition()).subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 1))))

Fulfillment.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'preimageSha256',
        PreimageFulfillment().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 0))),
    namedtype.NamedType(
        'prefixSha256',
        PrefixFulfillment().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 1))),
    namedtype.NamedType(
        'thresholdSha256',
        ThresholdFulfillment().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 2))),
    namedtype.NamedType(
        'rsaSha256',
        RsaSha256Fulfillment().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 3))),
    namedtype.NamedType(
        'ed25519Sha256',
        Ed25519Sha512Fulfillment().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatConstructed, 4))))


class PrefixFingerprintContents(univ.Sequence):
    pass


PrefixFingerprintContents.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'prefix',
        univ.OctetString().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType(
        'maxMessageLength',
        univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(
            0, 4294967295)).subtype(implicitTag=tag.Tag(
                tag.tagClassContext, tag.tagFormatSimple, 1))),
    namedtype.NamedType(
        'subcondition',
        Condition().subtype(implicitTag=tag.Tag(tag.tagClassContext,
                                                tag.tagFormatConstructed, 2))))


class RsaFingerprintContents(univ.Sequence):
    pass


RsaFingerprintContents.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'modulus',
        univ.OctetString().subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 0))))


class ThresholdFingerprintContents(univ.Sequence):
    pass


ThresholdFingerprintContents.componentType = namedtype.NamedTypes(
    namedtype.NamedType(
        'threshold',
        univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(
            1, 65535)).subtype(implicitTag=tag.Tag(tag.tagClassContext,
                                                   tag.tagFormatSimple, 0))),
    namedtype.NamedType(
        'subconditions',
        univ.SetOf(componentType=Condition()).subtype(implicitTag=tag.Tag(
            tag.tagClassContext, tag.tagFormatSimple, 1))))

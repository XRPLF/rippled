'use strict';

var _createDecoratedClass = require('babel-runtime/helpers/create-decorated-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var codec = require('ripple-address-codec');

var _require = require('./utils');

var bytesToHex = _require.bytesToHex;
var cached = _require.cached;
var isVirtual = _require.isVirtual;
var createAccountID = _require.createAccountID;

var KeyType = {
  secp256k1: 'secp256k1',
  ed25519: 'ed25519'
};

var KeyPair = (function () {
  function KeyPair(_ref) {
    var seedBytes = _ref.seedBytes;
    var pubBytes = _ref.pubBytes;

    _classCallCheck(this, KeyPair);

    this.seedBytes = seedBytes;
    this._pubKeyCanonicalBytes = pubBytes;
  }

  /*
  * @param {Array} message
  */

  _createDecoratedClass(KeyPair, [{
    key: 'sign',
    decorators: [isVirtual],
    value: function sign() {}

    /*
    * @param {Array<Byte>} message
    * @param {Array<Byte>} signature
    */
  }, {
    key: 'verify',
    decorators: [isVirtual],
    value: function verify() {}

    /*
    * @return {Array<Byte>} of bytes, in canonical form, for signing
    */
  }, {
    key: 'pubKeyCanonicalBytes',
    decorators: [isVirtual],
    value: function pubKeyCanonicalBytes() {}
  }, {
    key: 'pubKeyHex',
    decorators: [cached],
    value: function pubKeyHex() {
      return bytesToHex(this.pubKeyCanonicalBytes());
    }
  }, {
    key: 'accountBytes',
    decorators: [cached],
    value: function accountBytes() {
      return createAccountID(this.pubKeyCanonicalBytes());
    }
  }, {
    key: 'accountID',
    decorators: [cached],
    value: function accountID() {
      return codec.encodeAccountID(this.accountBytes());
    }
  }, {
    key: 'seed',
    decorators: [cached],
    value: function seed() {
      return codec.encodeSeed(this.seedBytes, this.type);
    }
  }, {
    key: 'signHex',
    value: function signHex(message) {
      return bytesToHex(this.sign(message));
    }
  }]);

  return KeyPair;
})();

module.exports = {
  KeyPair: KeyPair,
  KeyType: KeyType
};
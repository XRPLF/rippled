'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createDecoratedClass = require('babel-runtime/helpers/create-decorated-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var elliptic = require('elliptic');
var parseBytes = elliptic.utils.parseBytes;

var Ed25519 = elliptic.eddsa('ed25519');

var _require = require('./keypair');

var KeyPair = _require.KeyPair;
var KeyType = _require.KeyType;

var _require2 = require('./utils');

/*
@param {Array} seed bytes
 */
var Sha512 = _require2.Sha512;
var cached = _require2.cached;
function deriveEdKeyPairSecret(seed) {
  return new Sha512().add(seed).first256();
}

var Ed25519Pair = (function (_KeyPair) {
  _inherits(Ed25519Pair, _KeyPair);

  function Ed25519Pair(options) {
    _classCallCheck(this, Ed25519Pair);

    _get(Object.getPrototypeOf(Ed25519Pair.prototype), 'constructor', this).call(this, options);
    this.type = KeyType.ed25519;
  }

  /**
  * @param {String|Array} publicKey - public key in canonical form
  *                                   (0xED + 32 bytes)
  * @return {Ed25519Pair} key pair
  */

  _createDecoratedClass(Ed25519Pair, [{
    key: 'sign',
    value: function sign(message) {
      return this.key().sign(message).toBytes();
    }
  }, {
    key: 'verify',
    value: function verify(message, signature) {
      return this.key().verify(message, signature);
    }
  }, {
    key: 'pubKeyCanonicalBytes',
    decorators: [cached],
    value: function pubKeyCanonicalBytes() {
      return [0xED].concat(this.key().pubBytes());
    }
  }, {
    key: 'key',
    decorators: [cached],
    value: function key() {
      if (this.seedBytes) {
        return Ed25519.keyFromSecret(deriveEdKeyPairSecret(this.seedBytes));
      }
      return Ed25519.keyFromPublic(this.pubKeyCanonicalBytes().slice(1));
    }
  }], [{
    key: 'fromPublic',
    value: function fromPublic(publicKey) {
      return new Ed25519Pair({ pubBytes: parseBytes(publicKey) });
    }

    /**
    * @param {Array<Number>} seedBytes - A 128 bit seed
    * @return {Ed25519Pair} key pair
    */
  }, {
    key: 'fromSeed',
    value: function fromSeed(seedBytes) {
      return new Ed25519Pair({ seedBytes: seedBytes });
    }
  }]);

  return Ed25519Pair;
})(KeyPair);

module.exports = {
  Ed25519Pair: Ed25519Pair
};
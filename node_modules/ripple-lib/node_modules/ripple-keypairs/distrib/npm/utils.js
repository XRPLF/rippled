'use strict';

var hashjs = require('hash.js');
var Sha512 = require('./sha512');

function isVirtual(_, __, descriptor) {
  descriptor.value = function () {
    throw new Error('virtual method not implemented ');
  };
}

function cached(_, name, descriptor) {
  var computer = descriptor.value;
  var key = '_' + name;
  descriptor.value = function () {
    var value = this[key];
    if (value === undefined) {
      value = this[key] = computer.call(this);
    }
    return value;
  };
}

function toGenericArray(sequence) {
  var generic = [];
  for (var i = 0; i < sequence.length; i++) {
    generic.push(sequence[i]);
  }
  return generic;
}

function bytesToHex(a) {
  return a.map(function (byteValue) {
    var hex = byteValue.toString(16).toUpperCase();
    return hex.length > 1 ? hex : '0' + hex;
  }).join('');
}

function createAccountID(pubKeyBytes) {
  var hash256 = hashjs.sha256().update(pubKeyBytes).digest();
  var hash160 = hashjs.ripemd160().update(hash256).digest();
  return hash160;
}

function seedFromPhrase(phrase) {
  return hashjs.sha512().update(phrase).digest().slice(0, 16);
}

module.exports = {
  cached: cached,
  bytesToHex: bytesToHex,
  createAccountID: createAccountID,
  isVirtual: isVirtual,
  seedFromPhrase: seedFromPhrase,
  Sha512: Sha512,
  toGenericArray: toGenericArray
};


'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var GlobalBigNumber = require('bignumber.js');
var BigNumber = GlobalBigNumber.another({
  ROUNDING_MODE: GlobalBigNumber.ROUND_HALF_UP,
  DECIMAL_PLACES: 40
});

var Value = require('./value').Value;
var rippleUnits = new BigNumber(1e6);

var XRPValue = (function (_Value) {
  _inherits(XRPValue, _Value);

  function XRPValue(value) {
    _classCallCheck(this, XRPValue);

    _get(Object.getPrototypeOf(XRPValue.prototype), 'constructor', this).call(this, value);
    if (this._value.dp() > 6) {
      throw new Error('Value has more than 6 digits of precision past the decimal point, ' + 'an IOUValue may be being cast to an XRPValue');
    }
  }

  _createClass(XRPValue, [{
    key: 'multiply',
    value: function multiply(multiplicand) {
      if (multiplicand instanceof XRPValue) {
        return _get(Object.getPrototypeOf(XRPValue.prototype), 'multiply', this).call(this, new XRPValue(multiplicand._value.times(rippleUnits)));
      }
      return _get(Object.getPrototypeOf(XRPValue.prototype), 'multiply', this).call(this, multiplicand);
    }
  }, {
    key: 'divide',
    value: function divide(divisor) {
      if (divisor instanceof XRPValue) {
        return _get(Object.getPrototypeOf(XRPValue.prototype), 'divide', this).call(this, new XRPValue(divisor._value.times(rippleUnits)));
      }
      return _get(Object.getPrototypeOf(XRPValue.prototype), 'divide', this).call(this, divisor);
    }
  }, {
    key: 'negate',
    value: function negate() {
      return new XRPValue(this._value.neg());
    }
  }, {
    key: '_canonicalize',
    value: function _canonicalize(value) {
      if (value.isNaN()) {
        throw new Error('Invalid result');
      }
      return new XRPValue(value.round(6, BigNumber.ROUND_DOWN));
    }
  }, {
    key: 'equals',
    value: function equals(comparator) {
      return comparator instanceof XRPValue && this._value.equals(comparator._value);
    }
  }]);

  return XRPValue;
})(Value);

exports.XRPValue = XRPValue;
name: "Linux build, gcc-8 debug unity"
on: [push, pull_request]

# The files starting with "linux-" are all interdependent.
# If any significant changes are made, be sure to update them
# to keep them in sync.

env:
  CMAKE_EXTRA_ARGS: "-Dwerr=ON -Dwextra=ON"
  NINJA_BUILD: true
  CACHE_DIR: ${{ github.workspace }}/_cache
  NIH_CACHE_ROOT: ${{ github.workspace }}/_cache/nih_c
  PARALLEL_TESTS: true
  USE_CCACHE: true
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_NOHASHDIR: true
  CCACHE_DIR: ${{ github.workspace }}/_cache/ccache

jobs:
  linux_gcc_8_debug_unity:
    name: Linux
    runs-on: ubuntu-18.04
    timeout-minutes: 720
    if: ${{ !contains(github.event.head_commit.message, 'ci_run_') || contains(github.event.head_commit.message, 'ci_run_linux') }}
    outputs:
      cmakeconfig: ${{ steps.cachekeys.outputs.cmakeconfig }}
      headers: ${{ steps.cachekeys.outputs.headers }}
      source: ${{ steps.cachekeys.outputs.source }}
      instructions: ${{ steps.cachekeys.outputs.instructions }}
    strategy:
      fail-fast: false
      matrix:
        CC: [ "gcc-8" ]
        BUILD_TYPE: [ Debug ]
        unity: [ "ON" ]
        image: [ "rippled-ci-builder:2020-01-08" ]
        name: [ "base" ]
    container:
      image: rippleci/${{ matrix.image }}
    env:
      CC: ${{ matrix.CC }}
      BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
      CMAKE_ADD: "-Dunity=${{ matrix.unity }} ${{ matrix.CMAKE_ADD }}"
      NUM_PROCESSORS: ${{ matrix.NUM_PROCESSORS }}
    steps:
      - name: Cancel Previous Runs
        if: ${{ !contains(github.event.head_commit.message, 'ci_no_cancel') }}
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build cache keys
        id: cachekeys
        shell: bash
        run: |
          echo "::set-output name=cmakeconfig::${{ hashfiles('CMakeFiles.txt',
            'Builds/CMake/**', '.github/**/cache-invalidate.txt') }}"
          echo "::set-output name=headers::${{ hashfiles('src/**/*.h',
            'src/**/*.hpp', 'src/**/*.ipp') }}"
          echo "::set-output name=source::${{ hashfiles('src/**',
            '!src/**/*.md', '!src/**/*.uml', '!src/**/*.png', '!src/**/*.php') }}"
          echo "::set-output name=instructions::${{ hashfiles(
            '.github/**/linux-gcc8-debug.yml', '.github/**/action.yml') }}"

      - name: Cache
        continue-on-error: true
        uses: actions/cache@v2
        # The cache key is built on the following in order
        # 1) OS.
        # 2) The hash of all the CMake config files.
        # 3) The build compiler
        # 4) The build type
        # 5) The build unity setting
        # 6) The build custom name.
        # 7) The hash of all the header files under the source dir.
        # 8) The hash of all the code files under the source dir.
        # 9) The hash of the files controlling this job
        # When restoring, if the matching cache is not found, search for a usable
        # cache by chopping pieces off the end of the cache key until a match is
        # found, with a special case for the NIH which may have been built by
        # the "linux-general.yml" workflow
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-${{ steps.cachekeys.outputs.cmakeconfig }}-${{ matrix.CC }}-${{ matrix.BUILD_TYPE }}-${{ matrix.UNITY }}-${{ matrix.name }}-${{ steps.cachekeys.outputs.headers }}-${{ steps.cachekeys.outputs.source }}-${{ steps.cachekeys.outputs.instructions }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.cachekeys.outputs.cmakeconfig }}-${{ matrix.CC }}-${{ matrix.BUILD_TYPE }}-${{ matrix.UNITY }}-${{ matrix.name }}-${{ steps.cachekeys.outputs.headers }}-${{ steps.cachekeys.outputs.source }}
            ${{ runner.os }}-${{ steps.cachekeys.outputs.cmakeconfig }}-${{ matrix.CC }}-${{ matrix.BUILD_TYPE }}-${{ matrix.UNITY }}-${{ matrix.name }}-${{ steps.cachekeys.outputs.headers }}
            ${{ runner.os }}-${{ steps.cachekeys.outputs.cmakeconfig }}-${{ matrix.CC }}-${{ matrix.BUILD_TYPE }}-${{ matrix.UNITY }}-${{ matrix.name }}
            ${{ runner.os }}-nih-${{ steps.cachekeys.outputs.cmakeconfig }}-${{ matrix.image }}

      - name: Dump-environment
        run: |
          env
          set | grep =

      - name: Reset ccache stats
        shell: bash
        run: |
            if ! type -a ccache
            then
              apt install ccache
            fi
            ccache -s
            # Reset the stats so only this build counts
            ccache -z

      - name: Disk space before
        shell: bash
        run: |
          df -h
          du -sh ${CACHE_DIR}
          du -sh ${CCACHE_DIR} || true
          find ${NIH_CACHE_ROOT} -maxdepth 2 \( -iname src -prune -o \
            -type d -exec du -sh {} \; \) || true

      - name: Build and test
        uses: ./.github/actions/build-action
        with:
          image: ${{ matrix.image }}

      - name: Disk space after
        shell: bash
        if: always()
        run: |
          df -h
          du -sh ${CACHE_DIR}
          du -sh ${CCACHE_DIR} || true
          find ${NIH_CACHE_ROOT} -maxdepth 2 \( -iname src -prune -o \
            -type d -exec du -sh {} \; \) || true

      - name: Post-run ccache stats
        shell: bash
        run: ccache -s

      - name: Debug output artifacts
        if: always()
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: debug-output ${{ matrix.name }} ${{ matrix.CC }} ${{ matrix.BUILD_TYPE }} unity=${{ matrix.UNITY }}
          retention-days: 7
          if-no-files-found: ignore
          path: |
            build/**/CMakeOutput.log
            build/**/CMakeError.log

      - name: rippled executable artifact
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: rippled ${{ matrix.name }} ${{ matrix.CC }} ${{ matrix.BUILD_TYPE }} unity=${{ matrix.UNITY }}
          retention-days: 7
          if-no-files-found: ignore
          path: |
            build/**/rippled
            !build/**/_INSTALLED_/**

  linux_gcc_8_debug_unity_derived:
    name: Linux
    needs: [ linux_gcc_8_debug_unity ]
    runs-on: ubuntu-18.04
    timeout-minutes: 720
    strategy:
      fail-fast: false
      matrix:
        include:
            # Special cases which add to or override the cases in the
            # matrix.
            #
            # Note that "name" is used in the cache key, which cannot
            # contain commas (',').
            #
            - # Coverage builds
              name: "Coverage gcc-8"
              CC: "gcc-8"
              TARGET: coverage_report
              BUILD_TYPE: "Debug"
              SKIP_TESTS: true
              unity: "ON"
              CMAKE_ADD: "-Dcoverage=ON -DCMAKE_UNITY_BUILD_BATCH_SIZE=7"
              # Need this image because it has the coverage tools
              image: "rippled-ci-builder:2020-01-08"
              canfail: false

            - # dynamic lib builds
              name: "non-static gcc-8"
              CMAKE_ADD: "-Dstatic=OFF"
              CC: "gcc-8"
              BUILD_TYPE: Debug
              unity: "ON"
              image: "rippled-ci-builder:2020-01-08"
              canfail: false

            - name: "non-static BUILD_SHARED_LIBS gcc-8"
              CMAKE_ADD: "-Dstatic=OFF -DBUILD_SHARED_LIBS=ON"
              CC: "gcc-8"
              BUILD_TYPE: Debug
              unity: "ON"
              image: "rippled-ci-builder:2020-01-08"
              canfail: false

            - # makefile
              name: "makefile generator gcc-8"
              NINJA_BUILD: false
              CC: "gcc-8"
              BUILD_TYPE: Debug
              unity: "ON"
              image: "rippled-ci-builder:2020-01-08"
              canfail: false

            - # verify build with min version of cmake
              name: "min cmake version"
              CMAKE_EXE: /opt/local/cmake-3.9/bin/cmake
              CC: "gcc-8"
              BUILD_TYPE: Debug
              SKIP_TESTS: true
              unity: "ON"
              image: "rippled-ci-builder:2020-01-08"
              canfail: false

            - # validator keys project as subproj of rippled
              name: "validator-keys"
              TARGET: validator-keys
              CC: "gcc-8"
              BUILD_TYPE: Debug
              CMAKE_ADD: "-Dvalidator_keys=ON"
              unity: "ON"
              image: "rippled-ci-builder:2020-01-08"
              canfail: false

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontinue-on-error
    continue-on-error: ${{ matrix.canfail }}
    container:
      image: rippleci/${{ matrix.image }}
    env:
      CC: ${{ matrix.CC }}
      BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
      CMAKE_ADD: "-Dunity=${{ matrix.unity }} ${{ matrix.CMAKE_ADD }}"
      NUM_PROCESSORS: ${{ matrix.NUM_PROCESSORS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache
        continue-on-error: true
        uses: actions/cache@v2
        # The cache key is built on the following in order
        # 1) OS.
        # 2) The hash of all the CMake config files.
        # 3) The build compiler
        # 4) The build type
        # 5) The build unity setting
        # 6) The build custom name.
        # 7) The hash of all the header files under the source dir.
        # 8) The hash of all the code files under the source dir.
        # 9) The hash of the files controlling this job
        # When restoring, if the matching cache is not found, search for the
        # cache from the "base" build, which should have just completed, and
        # the NIH built as a fallback, but that should never happen.
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-${{ needs.linux_gcc_8_debug_unity.outputs.cmakeconfig }}-${{ matrix.CC }}-${{ matrix.BUILD_TYPE }}-${{ matrix.unity }}-${{ matrix.name }}-${{ needs.linux_gcc_8_debug_unity.outputs.headers }}-${{ needs.linux_gcc_8_debug_unity.outputs.source }}-${{ needs.linux_gcc_8_debug_unity.outputs.instructions }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.linux_gcc_8_debug_unity.outputs.cmakeconfig }}-${{ matrix.CC }}-${{ matrix.BUILD_TYPE }}-${{ matrix.UNITY }}-base-${{ needs.linux_gcc_8_debug_unity.outputs.headers }}-${{ needs.linux_gcc_8_debug_unity.outputs.source }}-${{ needs.linux_gcc_8_debug_unity.outputs.instructions }}
            ${{ runner.os }}-nih-${{ needs.linux_gcc_8_debug_unity.outputs.cmakeconfig }}-${{ matrix.image }}

      - name: Reset ccache stats
        shell: bash
        run: |
            if ! type -a ccache
            then
              apt install ccache
            fi
            ccache -s
            # Reset the stats so only this build counts
            ccache -z

      - name: Disk space before
        shell: bash
        continue-on-error: true
        run: |
          df -h
          du -sh ${CACHE_DIR}
          du -sh ${CCACHE_DIR} || true
          find ${NIH_CACHE_ROOT} -maxdepth 2 \( -iname src -prune -o \
            -type d -exec du -sh {} \; \) || true

      - name: Build and test
        uses: ./.github/actions/build-action
        with:
          image: ${{ matrix.image }}
          PARALLEL_TESTS: ${{ matrix.PARALLEL_TESTS }}
          TARGET: ${{ matrix.TARGET }}
          SKIP_TESTS: ${{ matrix.SKIP_TESTS }}
          NINJA_BUILD: ${{ matrix.NINJA_BUILD }}
          CMAKE_EXE: ${{ matrix.CMAKE_EXE }}

      - name: Disk space after
        shell: bash
        continue-on-error: true
        if: always()
        run: |
          df -h
          du -sh ${CACHE_DIR}
          du -sh ${CCACHE_DIR} || true
          find ${NIH_CACHE_ROOT} -maxdepth 2 \( -iname src -prune -o \
            -type d -exec du -sh {} \; \) || true

      - name: Post-run ccache stats
        shell: bash
        run: ccache -s

      - name: Debug output artifacts
        if: always()
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: debug-output ${{ matrix.name }} ${{ matrix.CC }} ${{ matrix.BUILD_TYPE }} unity=${{ matrix.unity }}
          retention-days: 7
          if-no-files-found: ignore
          path: |
            build/**/CMakeOutput.log
            build/**/CMakeError.log

      - name: rippled executable artifact
        if: matrix.TARGET != 'validator-keys'
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: rippled ${{ matrix.name }} ${{ matrix.CC }} ${{ matrix.BUILD_TYPE }} unity=${{ matrix.unity }}
          retention-days: 7
          if-no-files-found: ignore
          path: |
            build/**/rippled
            !build/**/_INSTALLED_/**

      - name: validator-keys executable artifact
        if: matrix.TARGET == 'validator-keys'
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: validator-keys
          retention-days: 7
          if-no-files-found: ignore
          path: |
            build/**/validator-keys
            !build/**/_INSTALLED_/**
            !build/**/CMake*
            !build/**/cmake*

  linux_gcc_8_debug_unity_runner:
    name: Linux
    needs: linux_gcc_8_debug_unity
    runs-on: ubuntu-18.04
    timeout-minutes: 720
    strategy:
      fail-fast: false
      matrix:
        name: [ "Manual tests" ]
        MANUAL_TESTS: [ "true" ]
        CC: [ "gcc-8" ]
        BUILD_TYPE: [ Debug ]
        unity: [ "ON" ]
    env:
      NUM_PROCESSORS: ${{ matrix.NUM_PROCESSORS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download rippled artifact
        uses: actions/download-artifact@v2
        with:
          name: rippled base ${{ matrix.CC }} ${{ matrix.BUILD_TYPE }} unity=${{ matrix.UNITY }}

      - name: Run manual tests
        shell: bash
        env:
          verbose: ${{ contains(env.commit_message, 'ci_verbose') }}
        run: |
            [[ "${verbose}" == "true" ]] && set -x || true

            find -iname rippled -ls
            # There can be only one
            [[ $( find -name rippled | wc -l ) -eq 1 ]]
            APP_PATH="$( find -iname rippled )"
            chmod a+rx "${APP_PATH}"

            : ${APP_ARGS:=}
            declare -a manual_tests=$( bin/ci/ubuntu/manual-tests.sh "${APP_PATH}" )
            APP_ARGS+=" --unittest=${manual_tests}"

            APP_ARGS+=" --unittest-jobs ${NUM_PROCESSORS:-2}"

            # Verbose or not, it's good to see the right params are being used
            echo Run: "${APP_PATH}" ${APP_ARGS}
            "${APP_PATH}" ${APP_ARGS}

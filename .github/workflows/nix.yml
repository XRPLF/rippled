name: nix
env:
  CONAN_VERSION: "2.17"
  CONAN_URL: http://18.143.149.228:8081/artifactory/api/conan/dev
on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  push:
    # If the branches list is ever changed, be sure to change it on all
    # build/test jobs (nix, macos, windows)
    branches:
      # Always build the package branches
      - develop
      - release
      - master
      # Branches that opt-in to running
      - "ci/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# This workflow has multiple job matrixes.
# They can be considered phases because most of the matrices ("test",
# "coverage", "conan", ) depend on the first ("dependencies").
#
# The first phase has a job in the matrix for each combination of
# variables that affects dependency ABI:
# platform, compiler, and configuration.
# It creates a GitHub artifact holding the Conan profile,
# and builds and caches binaries for all the dependencies.
# If an Artifactory remote is configured, they are cached there.
# If not, they are added to the GitHub artifact.
# GitHub's "cache" action has a size limit (10 GB) that is too small
# to hold the binaries if they are built locally.
# We must use the "{upload,download}-artifact" actions instead.
#
# The remaining phases have a job in the matrix for each test
# configuration. They install dependency binaries from the cache,
# whichever was used, and build and test rippled.
#
# "instrumentation" is independent, but is included here because it also
# builds on linux in the same "on:" conditions.

jobs:
  dependencies:
    if: ${{ github.event_name == 'push' || github.event.pull_request.draft != true || contains(github.event.pull_request.labels.*.name, 'DraftRunCI') }}
    name: Linux deps ${{ matrix.compiler }}-${{ matrix.compiler_version }} ${{ matrix.configuration }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - Linux
        compiler:
          - gcc
          - clang
        configuration:
          - Debug
          - Release
        include:
          - compiler: gcc
            compiler_version: 11
          - compiler: clang
            compiler_version: 14
    runs-on: [self-hosted, heavy]
    container: ghcr.io/xrplf/rippled-build-ubuntu:aaf5e3e
    env:
      build_dir: build
      profile: ${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.compiler_version }}-${{ matrix.configuration }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Configure Conan
        uses: ./.github/actions/conan_configure
        with:
          profile: ${{ env.profile }}

      - name: check environment
        run: |
          echo ${PATH} | tr ':' '\n'
          lsb_release -a || true
          conan --version
          cmake --version
          env | sort
      - name: archive profile
        # Create this archive before dependencies are added to the local cache.
        run: tar -czf conan.tgz -C $(conan config home) .
      - name: build dependencies
        uses: ./.github/actions/dependencies
        with:
          profile: ${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.compiler_version }}-${{ matrix.configuration }}

  test:
    name: Build ${{ matrix.compiler }}-${{ matrix.configuration }} unity=${{ matrix.unity }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - Linux
        compiler:
          - gcc
          - clang
        configuration:
          - Debug
          - Release
        unity: [ON, OFF]
        cmake_args: [""]
        include:
          - compiler: gcc
            compiler_version: 11
          - compiler: clang
            compiler_version: 14
    needs: dependencies
    runs-on: [self-hosted, heavy]
    container: ghcr.io/xrplf/rippled-build-ubuntu:aaf5e3e
    env:
      build_dir: build
    steps:
      - name: upgrade conan
        id: conan_info
        run: |
          pip install conan~=${{ env.CONAN_VERSION }}
      - name: download cache
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.compiler_version }}-${{ matrix.configuration }}
      - name: extract cache
        run: |
          conan version >> "$GITHUB_STEP_SUMMARY"
          tar -xzf conan.tgz -C $(conan config home) .
      - name: check environment
        run: |
          env | sort
          echo ${PATH} | tr ':' '\n'
          conan --version
          cmake --version
      - name: checkout
        uses: actions/checkout@v4
      - name: dependencies
        uses: ./.github/actions/dependencies
        with:
          profile: ${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.compiler_version }}-${{ matrix.configuration }}
          conf: |
            tools.build:verbosity=verbose
            tools.compilation:verbosity=verbose
          cmake-args: ${{ matrix.cmake_args }}
      - name: build
        uses: ./.github/actions/build
        with:
          generator: Ninja
          configuration: ${{ matrix.configuration }}
          compiler: ${{ matrix.compiler }}
          cmake-args: >
            -Dxrpld=True
            -Dtests=True
            -Dassert=TRUE
            -Dwerr=TRUE
            ${{ matrix.cmake-args }}
      - name: Run unit tests
        working-directory: ${{ env.build_dir }}
        run: |
          ./rippled --unittest --unittest-jobs $(nproc)
          ctest -j $(nproc) --output-on-failure

  reference-fee-test:
    name: "Fee test ${{ matrix.cmake-args }}"
    strategy:
      fail-fast: false
      matrix:
        cmake-args:
          - "200"
          - "1000"
    needs: dependencies
    runs-on: [self-hosted, heavy]
    container: ghcr.io/xrplf/rippled-build-ubuntu:aaf5e3e
    env:
      build_dir: .build
      platform: Linux
      compiler: gcc
      compiler_version: 11
      configuration: Debug
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: upgrade conan
        run: |
          pip install --upgrade conan~=${{ env.CONAN_VERSION }}
      - name: download cache
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.platform }}-${{ env.compiler }}-${{ env.compiler_version }}-${{ env.configuration }}
      - name: extract cache
        run: |
          conan version >> "$GITHUB_STEP_SUMMARY"
          tar -xzf conan.tgz -C $(conan config home) .
      - name: check environment
        run: |
          env | sort
          echo ${PATH} | tr ':' '\n'
          conan --version
          cmake --version
      - name: dependencies
        uses: ./.github/actions/dependencies
        with:
          profile: ${{ env.platform }}-${{ env.compiler }}-${{ env.compiler_version }}-${{ env.configuration }}
          conf: |
            tools.build:verbosity=verbose
            tools.compilation:verbosity=verbose
      - name: build
        uses: ./.github/actions/build
        with:
          generator: Ninja
          configuration: Debug
          cmake-args: >-
            -Dxrpld=TRUE
            -Dtests=TRUE
            -Dassert=TRUE
            -Dwerr=TRUE
            -DUNIT_TEST_REFERENCE_FEE=${{ matrix.cmake-args }}
      - name: test
        run: |
          cd ${build_dir}
          ./rippled --unittest --unittest-jobs $(nproc)
          ctest -j $(nproc) --output-on-failure
  coverage:
    env:
      PLATFORM: Linux
      COMPILER: gcc
      COMPILER_VERSION: 11
      CONFIGURATION: Debug
      GCOVR_VERSION: "8.0"
      build_dir: .build
    needs: dependencies
    runs-on: [self-hosted, heavy]
    container: ghcr.io/xrplf/rippled-build-ubuntu:aaf5e3e
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: upgrade conan
        run: |
          pip install conan~=${{ env.CONAN_VERSION }}
      - name: download cache
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PLATFORM }}-${{ env.COMPILER }}-${{ env.COMPILER_VERSION }}-${{ env.CONFIGURATION }}
      - name: extract cache
        run: |
          conan version >> "$GITHUB_STEP_SUMMARY"
          tar -xzf conan.tgz -C $(conan config home) .
          conan remote list
      - name: dependencies
        uses: ./.github/actions/dependencies
        with:
          profile: ${{ env.PLATFORM }}-${{ env.COMPILER }}-${{ env.COMPILER_VERSION }}-${{ env.CONFIGURATION }}
          conf: |
            tools.build:verbosity=verbose
            tools.compilation:verbosity=verbose
      - name: install gcovr
        run: pip install gcovr~=${{ env.GCOVR_VERSION }}
      - name: check environment
        run: |
          echo "${PATH}" | tr ':' '\n'
          conan --version
          cmake --version
          gcovr --version
          env | sort
      - name: build
        uses: ./.github/actions/build
        with:
          generator: Ninja
          configuration: ${{ env.CONFIGURATION }}
          cmake-args: >-
            -Dxrpld=TRUE
            -Dtests=TRUE
            -Dassert=TRUE
            -Dwerr=TRUE
            -Dcoverage=ON
            -Dcoverage_format=xml
            -DCODE_COVERAGE_VERBOSE=ON
            -DCMAKE_CXX_FLAGS="-O0"
            -DCMAKE_C_FLAGS="-O0"
          cmake-target: coverage
      - name: move coverage report
        shell: bash
        run: |
          coverage_file=$(find ../../.. -name coverage.xml -type f)
          echo "Coverage file at ${coverage_file}"
          mv "${coverage_file}" ./
          echo "${coverage_file}" >> $GITHUB_STEP_SUMMARY
      - name: archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml
          retention-days: 30
      - name: upload coverage report
        uses: wandalen/wretry.action@v1.4.10
        with:
          action: codecov/codecov-action@v4.5.0
          with: |
            files: coverage.xml
            fail_ci_if_error: true
            disable_search: true
            verbose: true
            plugin: noop
            token: ${{ secrets.CODECOV_TOKEN }}
          attempt_limit: 5
          attempt_delay: 210000 # in milliseconds

  conan:
    needs: dependencies
    runs-on: [self-hosted, heavy]
    container: ghcr.io/xrplf/rippled-build-ubuntu:aaf5e3e
    env:
      build_dir: .build
      configuration: Release
    steps:
      - name: upgrade conan
        id: conan_info
        run: |
          pip install conan~=${{ env.CONAN_VERSION }}

      - name: download cache
        uses: actions/download-artifact@v4
        with:
          name: Linux-gcc-11-${{ env.configuration }}
      - name: extract cache
        run: |
          conan version
          tar -xzf conan.tgz -C $(conan config home)
      - name: check environment
        run: |
          env | sort
          echo ${PATH} | tr ':' '\n'
          conan --version
          cmake --version
      - name: checkout
        uses: actions/checkout@v4
      - name: dependencies
        uses: ./.github/actions/dependencies
        with:
          profile: Linux-gcc-11-${{ env.configuration }}
      - name: export
        run: |
          conan export . --version head
      - name: build
        run: |
          cd tests/conan
          mkdir ${build_dir} && cd ${build_dir}
          conan install .. \
            --profile:all Linux-gcc-11-${{ env.configuration }} \
            --output-folder . \
            --build missing
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE:FILEPATH=./build/${configuration}/generators/conan_toolchain.cmake \
            -DCMAKE_BUILD_TYPE=${configuration}
          cmake --build .
          ./example | grep '^[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+'

  # NOTE we are not using dependencies built above because it lags with
  # compiler versions. Instrumentation requires clang version 16 or
  # later

  instrumentation-build:
    name: Antithesis build
    if: ${{ github.event_name == 'push' || github.event.pull_request.draft != true || contains(github.event.pull_request.labels.*.name, 'DraftRunCI') }}
    env:
      CLANG_VERSION: 16
    runs-on: [self-hosted, heavy]
    container: debian:bookworm
    steps:
        - name: install prerequisites
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            profile="Linux-clang-${CLANG_VERSION}-Debug" >> $GITHUB_ENV
            apt-get update
            apt-get install --yes --no-install-recommends curl \
              clang-${CLANG_VERSION} \
              clang++-${CLANG_VERSION} \
              python3-pip python-is-python3 make cmake git wget
            curl -fsSL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh
            chmod +x nodesource_setup.sh
            ./nodesource_setup.sh
            apt-get install -y nodejs
            node --version
            apt-get clean
            update-alternatives --install \
              /usr/bin/clang clang /usr/bin/clang-${CLANG_VERSION} 100 \
              --slave /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION}
            update-alternatives --auto clang
            pip install --no-cache --break-system-packages conan~=${CONAN_VERSION}
        - name: checkout
          uses: actions/checkout@v4
        - name: Configure Conan
          uses: ./.github/actions/conan_configure
          with:
            profile: Linux-clang-${{ env.CLANG_VERSION }}-Debug
        - name: download cache
          uses: actions/download-artifact@v4
          with:
            name: Linux-clang-${{ env.CLANG_VERSION }}-Debug
        - name: extract cache
          run: |
            conan version >> "$GITHUB_STEP_SUMMARY"
            tar -xzf conan.tgz -C $(conan config home) .
        - name: prepare environment
          run: |
            build_dir="${GITHUB_WORKSPACE}/.build"
            source_dir="${GITHUB_WORKSPACE}"
            mkdir -p "${build_dir}"
            echo "SOURCE_DIR=${source_dir}" >> $GITHUB_ENV
            echo "BUILD_DIR=${build_dir}" >> $GITHUB_ENV
            echo "COMPILER=$COMPILER" >> $GITHUB_ENV
            echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
        - name: build dependencies
          run: |
            cd ${BUILD_DIR}
            conan install "${SOURCE_DIR}" -of "${BUILD_DIR}" \
              --profile:a Linux-clang-${{ env.CLANG_VERSION }}-Debug \
              --options xrpld=True \
              --options tests=True \
              --build missing
        - name: build with instrumentation
          run: |
            cd ${BUILD_DIR}
            cmake -S ${SOURCE_DIR} -B ${BUILD_DIR} \
              -Dvoidstar=ON \
              -Dtests=ON \
              -Dxrpld=ON \
              -DCMAKE_BUILD_TYPE=Debug \
              -DSECP256K1_BUILD_BENCHMARK=OFF \
              -DSECP256K1_BUILD_TESTS=OFF \
              -DSECP256K1_BUILD_EXHAUSTIVE_TESTS=OFF \
              -DCMAKE_TOOLCHAIN_FILE=${BUILD_DIR}/build/generators/conan_toolchain.cmake
            cmake --build "${BUILD_DIR}"  --parallel $(nproc)
        - name: verify instrumentation enabled
          run: |
            cd ${BUILD_DIR}
            ./rippled --version | grep libvoidstar
        - name: run unit tests
          run: |
            cd ${BUILD_DIR}
            ./rippled -u --unittest-jobs $(( $(nproc)/4 ))
            ctest -j $(nproc) --output-on-failure

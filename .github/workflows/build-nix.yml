# This workflow build and test the project on Linux and MacOS.
name: Build and test

on:
  workflow_call:
    inputs:
      build_dir:
        description: 'The directory where the build will take place.'
        required: true
        type: string
      build_type:
        description: 'The build type to use.'
        required: true
        type: string
      cmake_args:
        description: 'Additional arguments to pass to CMake.'
        required: false
        type: string
      cmake_generator:
        description: 'The CMake generator to use for the build.'
        required: true
        type: string
      cmake_target:
        description: 'The CMake target to build.'
        required: false
        type: string
        default: 'all'
      conan_global_conf:
        description: 'The contents of the global Conan configuration.'
        required: true
        type: string
      conan_remote_name:
        description: 'The name of the Conan remote to use.'
        required: true
        type: string
      conan_remote_url:
        description: 'The URL of the Conan remote to use.'
        required: true
        type: string
      conan_remote_username:
        description: 'The username for logging into the Conan remote.'
        required: true
        type: string
      conan_remote_password:
        description: 'The password for logging into the Conan remote.'
        required: true
        type: string
      container:
        description: 'The container image to use for the job.'
        required: true
        type: string
      runner:
        description: 'A string representing the runner to use.'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-nix
  cancel-in-progress: true

defaults:
  run:
    shell: bash

# Install the Conan dependencies for the specified configuration. The ones that
# are not in the remote cache will be built from source and added to the cache.
# This action assumes that the Conan profiles have already been installed and
# that the user has logged into the specified remote, see the 'conan-configure'
# action.
jobs:
  build-and-test:
    runs-on: ${{ inputs.runner }}
    container: ${{ inputs.container }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Check configuration
        run: |
          echo "Checking path"
          echo ${PATH} | tr ':' '\n'
  
          echo "Checking environment variables."
          env | sort
      - name: Check versions
        run: |
          echo "Checking CMake version."
          cmake --version
  
          echo "Checking compiler version."
          ${CC} --version
      - name: Configure Conan
        uses: ./.github/actions/conan-configure
        with:
          conan_global_conf: ${{ inputs.conan_global_conf }}
          conan_remote_name: ${{ inputs.conan_remote_name }}
          conan_remote_url: ${{ inputs.conan_remote_url }}
          conan_remote_username: ${{ inputs.conan_remote_username }}
          conan_remote_password: ${{ inputs.conan_remote_password }}
      - name: Configure CMake
        working-directory: ${{ inputs.build_dir }}
        run: |
          cmake \
            ${{ inputs.cmake_generator && format('-G "{0}"', inputs.cmake_generator) || '' }} \
            -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -Dtests=TRUE \
            -Dxrpld=TRUE \
            ${{ inputs.cmake_args }} \
            ..
      - name: Build the binary
        working-directory: ${{ inputs.build_dir }}
        run: |
          cmake --build . \
                --config ${{ inputs.build_type }} \
                --parallel $(nproc) \
                --target ${{ inputs.cmake_target }}
      - name: Check linking
        if: startsWith(inputs.runner, 'ubuntu-')
        working-directory: ${{ inputs.build_dir }}
        run: |
          ldd ./rippled
          if [ "$(ldd ./rippled | grep -E '(libstdc\+\+|libgcc)' | wc -l)" -eq 0 ]; then
            echo 'The binary is statically linked.'
          else
            echo 'The binary is dynamically linked.'
          exit 1
          fi
      - name: Test the binary
        working-directory: ${{ inputs.build_dir }}
        run: |
          ./rippled --unittest --unittest-jobs $(nproc)
          ctest -j $(nproc) --output-on-failure

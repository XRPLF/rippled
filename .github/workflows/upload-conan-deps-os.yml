name: Upload Conan Dependencies

on:
  workflow_call:
    inputs:
      build_dir:
        description: "The directory where to build."
        required: false
        type: string
        default: ".build"
      conan_remote_name:
        description: "The name of the Conan remote to use."
        required: false
        type: string
        default: xrplf

      os:
        description: 'The operating system to use for the build ("linux", "macos", "windows").'
        required: true
        type: string
      force_source_build:
        description: "Force source build of all dependencies"
        required: true
        type: boolean
      force_upload:
        description: "Force upload of all dependencies"
        required: true
        type: boolean
    secrets:
      CONAN_USERNAME:
        required: true
      CONAN_PASSWORD:
        required: true

jobs:
  generate-matrix:
    uses: ./.github/workflows/strategy-matrix.yml
    with:
      os: ${{ inputs.os }}
      strategy_matrix: all

  upload-conan-deps:
    needs:
      - generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.architecture.runner }}
    container: ${{ inputs.os == 'linux' && format('ghcr.io/xrplf/ci/{0}-{1}:{2}-{3}', matrix.os.distro_name, matrix.os.distro_version, matrix.os.compiler_name, matrix.os.compiler_version) || null }}

    steps:
      - name: Cleanup workspace
        if: ${{ runner.os == 'macOS' }}
        uses: XRPLF/actions/.github/actions/cleanup-workspace@3f044c7478548e3c32ff68980eeb36ece02b364e

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Prepare runner
        uses: XRPLF/actions/.github/actions/prepare-runner@638e0dc11ea230f91bd26622fb542116bb5254d5
        with:
          disable_ccache: false

      - name: Setup Conan
        uses: ./.github/actions/setup-conan

      - name: Build dependencies
        uses: ./.github/actions/build-deps
        with:
          build_dir: ${{ inputs.build_dir }}
          build_type: ${{ matrix.build_type }}
          force_build: ${{ inputs.force_source_build }}

      - name: Login to Conan
        if: github.repository_owner == 'XRPLF' && github.event_name != 'pull_request'
        run: conan remote login -p ${{ secrets.CONAN_PASSWORD }} ${{ inputs.conan_remote_name }} ${{ secrets.CONAN_USERNAME }}

      - name: Upload Conan packages
        if: github.repository_owner == 'XRPLF' && github.event_name != 'pull_request' && github.event_name != 'schedule'
        run: conan upload "*" -r=${{ inputs.conan_remote_name }} --confirm ${{ inputs.force_upload == 'true' && '--force' || '' }}

# This workflow builds and tests the binary for various Windows configurations.
name: Build and test on Windows

on:
  workflow_call:
    inputs:
      conan_remote_name:
        description: 'The name of the Conan remote to use.'
        required: true
        type: string
      conan_remote_url:
        description: 'The URL of the Conan endpoint to use.'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  # Global configuration for Conan. This is used to set the number of parallel
  # downloads, uploads, and build jobs. The verbosity is set to verbose to
  # provide more information during the build process.
  CONAN_GLOBAL_CONF: |
    core:non_interactive=True
    core.download:parallel={{ os.cpu_count() }}
    core.upload:parallel={{ os.cpu_count() }}
    tools.build:jobs={{ (os.cpu_count() * 4/5) | int }}
    tools.build:verbosity=verbose
    tools.compilation:verbosity=verbose

jobs:
  # Generate the strategy matrix to be used by the following job.
  generate-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: 3.13
      - name: Generate strategy matrix
        id: generate
        run: python .github/scripts/strategy-matrix/generate.py --config=.github/scripts/strategy-matrix/windows.json --ref=${{ github.ref }} >> "${GITHUB_OUTPUT}"
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}

  # Build and test the binary.
  build-test:
    needs:
      - generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.architecture.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: 3.13
      - name: Install Conan
        run: pip install wheel conan
      - name: Check configuration
        run: |
#          echo "Checking path"
#          $env:PATH -split ';' | Sort-Object
#
#          echo "Checking environment variables."
#          ls env:
#
           echo "Checking CMake version."
           cmake --version

           echo "Checking Conan version."
           conan --version
      - name: Build dependencies
        uses: ./.github/actions/build-deps
        with:
          build_type: ${{ matrix.build_type }}
          conan_global_conf: ${{ env.CONAN_GLOBAL_CONF }}
          conan_remote_name: ${{ inputs.conan_remote_name }}
          conan_remote_url: ${{ inputs.conan_remote_url }}
          os: 'Windows'
      - name: Build and test the binary
        uses: ./.github/actions/build-test
        with:
          build_type: ${{ matrix.build_type }}
          cmake_args: ${{ matrix.cmake_args }}
          cmake_generator: 'Visual Studio 17 2022'
          cmake_target: 'install'
          os: 'Windows'

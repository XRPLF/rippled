name: dependencies
inputs:
  compiler:
    required: true
  compiler_version:
    required: true
  configuration:
    required: true
# An implicit input is the environment variable `build_dir`.
runs:
  using: composite
  steps:
    - name: export custom recipes
      shell: bash
      run: |
        conan export --version 1.1.10 external/snappy
        conan export --version 9.7.3 external/rocksdb
        conan export --version 4.0.3 external/soci
        conan export --version 2.0.8 external/nudb
    - name: add Ripple Conan remote
      shell: bash
      run: |
        conan remote list
        conan remote remove ripple || true
        # Do not quote the URL. An empty string will be accepted (with
        # a non-fatal warning), but a missing argument will not.
        conan remote add ripple --index 0 ${{ env.CONAN_URL }}
    - name: try to authenticate to Ripple Conan remote
      id: remote
      shell: bash
      run: |
        # `conan user` implicitly uses the environment variables
        # CONAN_LOGIN_USERNAME_<REMOTE> and CONAN_PASSWORD_<REMOTE>.
        # https://docs.conan.io/1/reference/commands/misc/user.html#using-environment-variables
        # https://docs.conan.io/1/reference/env_vars.html#conan-login-username-conan-login-username-remote-name
        # https://docs.conan.io/1/reference/env_vars.html#conan-password-conan-password-remote-name
        ## Don't try this yet...
        # echo outcome=$(conan user --remote ripple --password >&2 \
        #   && echo success || echo failure) | tee ${GITHUB_OUTPUT}
    - name: list missing binaries
      id: binaries
      shell: bash
      # Print the list of dependencies that would need to be built locally.
      # A non-empty list means we have "failed" to cache binaries remotely.
      run: |
        # echo missing=$(conan info . --build missing --settings build_type=${{ inputs.configuration }} --json 2>/dev/null  | grep '^\[') | tee ${GITHUB_OUTPUT}
    - name: install dependencies
      shell: bash
      run: |
        mkdir ${build_dir}
        cd ${build_dir}
        COMPILER=${{ inputs.compiler }} \
        COMPILER_VERSION=${{ inputs.compiler_version }} \
        BUILD_TYPE=${{ inputs.configuration }} \
        conan install \
          --output-folder . \
          --build missing \
          --options '&:tests=True' \
          --options '&:xrpld=True' \
          ..

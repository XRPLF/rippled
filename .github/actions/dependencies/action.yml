name: dependencies
inputs:
  configuration:
    required: true
  remote_name:
    required: true
# An implicit input is the environment variable `build_dir`.
runs:
  using: composite
  steps:
    - name: export custom recipes
      shell: bash
      run: |
        conan export --version 1.1.10 external/snappy
        conan export --version 4.0.3 external/soci
    - name: add Conan remotes
      if: env.CONAN_URL != ''
      shell: bash
      run: |
        echo "Adding Conan remotes for recipes."
        if conan remote list | grep -q "recipes"; then
          conan remote update recipes --index 0 --url ${CONAN_URL}/recipes
          echo "Updated Conan remote 'recipes' to ${CONAN_URL}/recipes."
        else
          conan remote add --index 0 recipes ${CONAN_URL}/recipes
          echo "Added new conan remote 'recipes' at ${CONAN_URL}/recipes."
        fi
        echo "Adding Conan remotes for packages."
        if conan remote list | grep -q "${{ inputs.remote_name }}"; then
          conan remote update ${{ inputs.remote_name }} --index 1 --url ${CONAN_URL}/${{ inputs.remote_name }}
          echo "Updated Conan remote '${{ inputs.remote_name }}' to ${CONAN_URL}/${{ inputs.remote_name }}."
        else
          conan remote add --index 1 ${{ inputs.remote_name }} ${CONAN_URL}/${{ inputs.remote_name }}
          echo "Added new conan remote '${{ inputs.remote_name }}' at ${CONAN_URL}/${{ inputs.remote_name }}."
        fi
    - name: Log into Conan remotes
      if: env.CONAN_URL != '' && env.CONAN_LOGIN_USERNAME_RIPPLE != '' && env.CONAN_PASSWORD_RIPPLE != ''
      id: remote
      shell: bash
      run: |
        conan remote login recipes "${{ env.CONAN_LOGIN_USERNAME_RIPPLE }}" --password "${{ env.CONAN_PASSWORD_RIPPLE }}"
        conan remote login ${{ inputs.conan_remote_name }} "${{ env.CONAN_LOGIN_USERNAME_RIPPLE }}" --password "${{ env.CONAN_PASSWORD_RIPPLE }}"
        conan remote list-users
    - name: list missing binaries
      id: binaries
      shell: bash
      # Print the list of dependencies that would need to be built locally.
      # A non-empty list means we have "failed" to cache binaries remotely.
      run: |
        echo missing=$(conan info . --build missing --settings build_type=${{ inputs.configuration }} --json 2>/dev/null  | grep '^\[') | tee ${GITHUB_OUTPUT}
    - name: install dependencies
      shell: bash
      run: |
        mkdir ${build_dir}
        cd ${build_dir}
        conan install \
          --output-folder . \
          --build missing \
          --options:host "&:tests=True" \
          --options:host "&:xrpld=True" \
          --settings:all build_type=${{ inputs.configuration }} \
          ..

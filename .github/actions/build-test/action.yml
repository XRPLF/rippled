# This action build and tests the binary. The Conan dependencies must have
# already been installed (see the build-deps action).
name: Build and Test

inputs:
  build_dir:
    description: 'The directory where to build.'
    required: false
    type: string
    default: '.build'
  build_type:
    description: 'The build type to use.'
    required: true
    type: string
  cmake_args:
    description: 'Additional arguments to pass to CMake.'
    required: false
    type: string
  cmake_generator:
    description: 'The CMake generator to use for the build.'
    required: true
    type: string
  cmake_target:
    description: 'The CMake target to build.'
    required: true
    type: string
  os:
    description: 'The operating system that is used (Linux, MacOS, or Windows).'
    required: true
    type: choice
    options:
      - Linux
      - MacOS
      - Windows

runs:
  using: composite
  steps:
    # Set up CMake.
    - name: Configure CMake
      shell: bash
      working-directory: ${{ inputs.build_dir }}
      run: |
        cmake \
          ${{ inputs.cmake_generator && format('-G "{0}"', inputs.cmake_generator) || '' }} \
          -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
          ${{ inputs.cmake_args }} \
          ..
    # Build and test the binary.
    - name: Build the binary
      shell: bash
      working-directory: ${{ inputs.build_dir }}
      run: |
        cmake --build . \
              --config ${{ inputs.build_type }} \
              --parallel $(nproc) \
              --target ${{ inputs.cmake_target }}
    - name: Check linking
      if: ${{ inputs.os == 'Linux' }}
      shell: bash
      working-directory: ${{ inputs.build_dir }}
      run: |
        ldd ./rippled
        if [ "$(ldd ./rippled | grep -E '(libstdc\+\+|libgcc)' | wc -l)" -eq 0 ]; then
          echo 'The binary is statically linked.'
        else
          echo 'The binary is dynamically linked.'
        exit 1
        fi
    - name: Test the binary
      shell: bash
      working-directory: ${{ inputs.build_dir }}/${{ inputs.os == 'Windows' && inputs.build_type || '' }}
      run: |
        ./rippled --unittest --unittest-jobs $(nproc)
        ctest -j $(nproc) --output-on-failure
    - name: Verify voidstar
      shell: bash
      if: ${{ contains(inputs.cmake_args, '-Dvoidstar=ON') }}
      working-directory: ${{ inputs.build_dir }}
      run: ./rippled --version | grep libvoidstar
    - name: Archive coverage report
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.build_dir }}/coverage.xml
        path: coverage.xml
        retention-days: 30
    - name: Upload coverage report
      uses: wandalen/wretry.action@v3.8.0
      with:
        action: codecov/codecov-action@v5.4.3
        with: |
          files: ${{ env.build_dir }}/coverage.xml
          fail_ci_if_error: true
          disable_search: true
          verbose: true
          plugin: noop
          token: ${{ secrets.CODECOV_TOKEN }}
        attempt_limit: 5
        attempt_delay: 210000 # in milliseconds

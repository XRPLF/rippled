name: Build and Test

inputs:
  build_dir:
    description: 'The directory where to build.'
    required: true
    type: string
  build_type:
    description: 'The build type to use.'
    required: true
    type: string
  cmake_args:
    description: 'Additional arguments to pass to CMake.'
    required: false
    type: string
  cmake_generator:
    description: 'The CMake generator to use for the build.'
    required: true
    type: string
  cmake_target:
    description: 'The CMake target to build.'
    required: true
    type: string
  conan_global_conf:
    description: 'The contents of the global Conan configuration file.'
    required: true
    type: string
  conan_remote_name:
    description: 'The name of the Conan remote to use.'
    required: true
    type: string
  conan_remote_url:
    description: 'The URL of the Conan endpoint to use. The remote name will be added as a path to the URL.'
    required: true
    type: string
  conan_remote_username:
    description: 'The username for logging into the Conan remote.'
    required: false
    type: string
  conan_remote_password:
    description: 'The password for logging into the Conan remote.'
    required: false
    type: string
  os:
    description: 'A string representing which operating system is used.'
    required: true
    type: choice
    options:
      - Linux
      - MacOS
      - Windows

# Install the Conan profiles and log into the specified remote. We first remove
# the remote if it already exists, which can occur on self-hosted runners where
# the workspace is not cleaned up between runs.
runs:
  using: composite
  steps:
    # Set up Conan. Note that MacOS and Windows, which are self-hosted runners,
    # we should overwrite the global.conf file instead of appending to it. On
    # Linux runners, where we run Docker images, the file is reset on each run
    # with important defaults.
    - name: Install Conan profile
      shell: bash
      run: |
        if [ '${{ inputs.os }}' == 'Linux' ]; then
          echo "${{ inputs.conan_global_conf }}" >> $(conan config home)/global.conf
        else
          echo "${{ inputs.conan_global_conf }}" > $(conan config home)/global.conf
        fi
        conan config install conan/profiles/default -tf $(conan config home)/profiles/
        echo "Conan profile:"
        conan profile show
        echo "Conan configuration:"
        conan config show '*'
    - name: Add Conan remote
      shell: bash
      run: |
        if conan remote list | grep -q '${{ inputs.conan_remote_name }}'; then
          conan remote update --index 0 --url ${{ inputs.conan_remote_url }} ${{ inputs.conan_remote_name }}
          echo "Updated Conan remote '${{ inputs.conan_remote_name }}' to ${{ inputs.conan_remote_url }}."
        else
          conan remote add --index 0 ${{ inputs.conan_remote_name }} ${{ inputs.conan_remote_url }}
          echo "Added new conan remote '${{ inputs.conan_remote_name }}' at ${{ inputs.conan_remote_url }}."
        fi
    - name: Log into Conan remote
      shell: bash
      if: ${{ inputs.conan_remote_username && inputs.conan_remote_password }}
      run: |
        conan remote login ${{ inputs.conan_remote_name }} "${{ inputs.conan_remote_username }}" --password "${{ inputs.conan_remote_password }}"
        conan remote list-users
    - name: Install Conan dependencies
      shell: bash
      run: |
        mkdir -p ${{ inputs.build_dir }}
        cd ${{ inputs.build_dir }}
        conan install \
          --output-folder . \
          --build '*' \
          --options:host '&:tests=True' \
          --options:host '&:xrpld=True' \
          --settings:all build_type=${{ inputs.build_type }} \
          ..
    - name: Upload Conan dependencies
      shell: bash
      if: ${{ inputs.conan_remote_username && inputs.conan_remote_password }}
      run: conan upload '*' --confirm --check --force --remote ${{ inputs.conan_remote_name }}
    # Set up CMake.
    - name: Configure CMake
      shell: bash
      working-directory: ${{ inputs.build_dir }}
      run: |
        cmake \
          ${{ inputs.cmake_generator && format('-G "{0}"', inputs.cmake_generator) || '' }} \
          -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
          ${{ inputs.cmake_args }} \
          ..
    # Build and test the binary.
    - name: Build the binary
      shell: bash
      working-directory: ${{ inputs.build_dir }}
      run: |
        cmake --build . \
              --config ${{ inputs.build_type }} \
              --parallel $(nproc) \
              --target ${{ inputs.cmake_target }}
    - name: Check linking
      if: ${{ inputs.os == 'Linux' }}
      shell: bash
      working-directory: ${{ inputs.build_dir }}
      run: |
        ldd ./rippled
        if [ "$(ldd ./rippled | grep -E '(libstdc\+\+|libgcc)' | wc -l)" -eq 0 ]; then
          echo 'The binary is statically linked.'
        else
          echo 'The binary is dynamically linked.'
        exit 1
        fi
    - name: Test the binary
      shell: bash
      working-directory: ${{ inputs.build_dir }}/${{ inputs.os == 'Windows' && inputs.build_type || '' }}
      run: |
        ./rippled --unittest --unittest-jobs $(nproc)
        ctest -j $(nproc) --output-on-failure
    - name: Verify voidstar
      shell: bash
      if: ${{ contains(inputs.cmake_args, '-Dvoidstar=ON') }}
      working-directory: ${{ inputs.build_dir }}
      run: ./rippled --version | grep libvoidstar

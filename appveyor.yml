# Set environment variables.
environment:
  PYTHON: C:/Python27-x64

  # We bundle up protoc.exe and only the parts of boost and openssl we need so
  # that it's a small download. We also use appveyor's free cache, avoiding fees
  # downloading from S3 each time. 
  # TODO: script to create this package.
  RIPPLED_DEPS_URL: https://ripple.github.io/Downloads/appveyor/rippled_deps15.01.zip

  # Other dependencies we just download each time.
  PIP_URL: https://bootstrap.pypa.io/get-pip.py
  PYWIN32_URL: https://downloads.sourceforge.net/project/pywin32/pywin32/Build%20220/pywin32-220.win-amd64-py2.7.exe

  # Scons honours these environment variables, setting the include/lib paths.
  BOOST_ROOT: C:/rippled_deps15.01/boost
  OPENSSL_ROOT: C:/rippled_deps15.01/openssl

  matrix:
  - build: scons
    target: msvc.debug
  - build: cmake
    target: msvc.debug
    app: signlibdemo
  # This build works, but our current Appveyor config runs matrix builds
  # sequentially, and the one build is already slow enough.
  #- build: cmake
  #  target: msvc.debug
  #  app: rippled

os: Visual Studio 2015

# At the end of each successful build we cache this directory. It must be less
# than 100MB total compressed.
cache:
  - "C:\\rippled_deps15.01"

# This means we'll download a zip of the branch we want, rather than the full
# history.
shallow_clone: true

install:
  # We want easy_install, python and protoc.exe on PATH.
  - SET PATH=%PYTHON%;%PYTHON%/Scripts;C:/rippled_deps15.01;%PATH%

  # `ps` prefix means the command is executed by powershell.
  - ps: |
        if ($env:build -eq "scons") {
          Start-FileDownload $env:PIP_URL
          Start-FileDownload $env:PYWIN32_URL

        }
  - bin/ci/windows/install-dependencies.bat

  # Download dependencies if appveyor didn't restore them from the cache.
  # Use 7zip to unzip.
  - ps: |
        if (-not(Test-Path 'C:/rippled_deps15.01')) {
            echo "Download from $env:RIPPLED_DEPS_URL"
            Start-FileDownload "$env:RIPPLED_DEPS_URL"
            7z x rippled_deps15.01.zip -oC:\ -y > $null
        }

  # Newer DEPS include a versions file.
  # Dump it so we can verify correct behavior.
  - ps: |
        if (Test-Path 'C:/rippled_deps15.01/versions.txt') {
          cat 'C:/rippled_deps15.01/versions.txt'
        }

# TODO: This is giving me grief
# artifacts:
#   # Save rippled.exe in the cloud after each build.
#   - path: "build\\rippled.exe"

build_script:
  # We set the environment variables needed to put compilers on the PATH.
  - '"%VS140COMNTOOLS%../../VC/vcvarsall.bat" x86_amd64'
  # Show which version of the compiler we are using.
  - cl
  - ps: |
        if ($env:build -eq "scons") {
          # Build with scons
          scons $env:target -j%NUMBER_OF_PROCESSORS%
        }
        else
        {
          # Build with cmake
          cmake --version
          cmake -G"Visual Studio 14 2015 Win64" -Dtarget=$($env:target).ci
          msbuild "$($env:app).vcxproj"
        }

after_build:
  - ps: |
        if ($env:build -eq "scons") {
          # Put our executable in a place where npm test can find it.
          cp build/$($env:target)/rippled.exe build
          ls build
          $exe="build/rippled"
        }
        else
        {
          $exe="Debug/$env:app"
        }
        "Exe is at $exe"

test_script:
  - ps: |
        if ($env:app -eq "signlibdemo") {
          # Run the signlibdemo test
          & $exe
        }
        else
        {
          # Run the rippled unit tests
          & $exe --unittest

          # Run the rippled integration tests
          & npm install --progress=false
          & npm test --rippled="$exe"
        }



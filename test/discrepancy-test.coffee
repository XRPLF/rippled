################################### REQUIRES ###################################

assert                     = require 'assert'
async                      = require 'async'

{
  Amount
  Meta
}                          = require 'ripple-lib'

testutils                  = require './testutils'

{
  pretty_json
  server_setup_teardown
}                          = require './batmans-belt'

#################################### CONFIG ####################################

config = testutils.init_config()

#################################### HELPERS ###################################

tx_blob_submit_factory = (remote, txn) ->
  (next) ->
    req = remote.request_submit()
    req.message.tx_blob = txn
    req.once 'error', -> assert false, "unexpected error submitting txns"
    req.once 'success', (m) ->
      remote.once 'ledger_closed', -> next()
      remote.ledger_accept()
    req.request()

offer_amounts = (fields) ->
  [Amount.from_json(fields.TakerPays),
   Amount.from_json(fields.TakerGets)]

executed_offers = (meta) ->
  offers = {}

  meta.nodes.forEach (n, i) ->
    if n.entryType == 'Offer'
      [prev_pays, prev_gets] = offer_amounts(n.fieldsPrev)
      [final_pays, final_gets] = offer_amounts(n.fields)

      summary=
        pays_executed: prev_pays.subtract(final_pays).to_text_full()
        gets_executed: prev_gets.subtract(final_gets).to_text_full()
        pays_final: final_pays.to_text_full()
        gets_final: final_gets.to_text_full()
        owner: n.fields.Account

      offers[n.ledgerIndex] = summary
  offers

build_tx_blob_submission_series = (remote, txns_to_submit) ->
  series = []
  while (txn = txns_to_submit.shift())
    series.push tx_blob_submit_factory remote, txn
  series

compute_xrp_discrepancy = (fee, meta) ->
  before = Amount.from_json(0)
  after = Amount.from_json(fee)

  meta.nodes.forEach (n, i) ->
    if n.entryType == 'AccountRoot'
      prev = n.fieldsPrev?.Balance || n.fields.Balance
      final  = n.fieldsFinal?.Balance || n.fields.Balance

      before = before.add(Amount.from_json(prev))
      after = after.add(Amount.from_json(final))

  before.subtract(after)

suite 'Discrepancy test', ->
  suite 'XRP Discrepancy', ->
    get_context = server_setup_teardown({server_opts: {ledger_file: 'ledger-6226713.json'}})
    test '01030E435C2EEBE2689FED7494BC159A4C9B98D0DF0B23F7DFCE223822237E8C', (done) ->
      {remote} = get_context()
      txns_to_submit = [
        # This is the nasty one ;)

      ]
      series = build_tx_blob_submission_series remote, txns_to_submit
      async.series series, ->
        hash = '01030E435C2EEBE2689FED7494BC159A4C9B98D0DF0B23F7DFCE223822237E8C'
        remote.request_tx hash, (e, m) ->
          meta = new Meta(m.meta)
          zero = Amount.from_json(0)
          discrepancy = compute_xrp_discrepancy(m.Fee, meta)
          assert discrepancy.equals(zero), discrepancy.to_text_full()
          done()

  suite 'RIPD 304', ->
    get_context = server_setup_teardown({server_opts: {ledger_file: 'ledger-7145315.json'}})
    test 'B1A305038D43BCDF3EA1D096E6A0ACC5FB0ECAE0C8F5D3A54AD76A2AA1E20EC4', (done) ->
      {remote} = get_context()

      txns_to_submit = [
        '120008228000000024000030FD2019000030F0201B006D076B68400000000000000F732103325EB29A014DDE22289D0EA989861D481D54D54C727578AB6C2F18BC342D3829744630440220668D06C44144C284E0346EE7785EB41B72EDBB244FE6EE02F317011A07023C63022067A52367AC01941A3FE19477D7F588C862704A44A8A771BCAD6B7A9119B71E9E8114A7C1C74DADB3693C199888A901FC2B7FD0884EE1'

        '1200082200000000240019B1A520190019B1A46840000000000000327321025718736160FA6632F48EA4354A35AB0340F8D7DC7083799B9C57C3E937D7185174463044022048B3669EDCA795A1897DA3C7328C8526940708DBB3FFAD88CA5DC22D0398A67502206B37796A743105DE05EE1A11BE017404B4F41FA17E6449E390C36F69D8907C078114AFFDCC86D33C153DA185156EB32608ACCF0BC713'
        '1200072200000000240019B1A664D550AF2D90A009D80000000000000000000000004A50590000000000E5C92828261DBAAC933B6309C6F5C72AF020AFD46540000002540BE4006840000000000000327321025718736160FA6632F48EA4354A35AB0340F8D7DC7083799B9C57C3E937D71851744630440220509F09B609573BC8ADDD55449DBD5201A40F6C1C3AA2D5D984ACB54E0F651F2E022019E6AF2937A5E76D8C9A2B5B0C4704D6BE637AAC17F2EE135DA449B0892B728B8114AFFDCC86D33C153DA185156EB32608ACCF0BC713'
        # This is the nasty one ;)

      ]

      series = build_tx_blob_submission_series remote, txns_to_submit

      async.series series, ->
        hash = 'B1A305038D43BCDF3EA1D096E6A0ACC5FB0ECAE0C8F5D3A54AD76A2AA1E20EC4'
        remote.request_tx hash, (e, m) ->
          meta = new Meta(m.meta)

          expected = {
            "003313896DA56CFA0996B36AF066589EF0E689230E67DA01D13320289C834A93": {
              "pays_executed": "955.967853/XRP",
              "gets_executed": "445.6722130686/JPY/rMAz5ZnK73nyNUL4foAvaxdreczCkG3vA6",
              "pays_final": "245,418.978522/XRP",
              "gets_final": "114414.3277869564/JPY/rMAz5ZnK73nyNUL4foAvaxdreczCkG3vA6",
              "owner": "rQLEvSnbgpcUXkTU8VvSzUPX4scukCjuzb"

            },
            "9847793D6B936812907ED58455FBA4195205ABCACBE28DF9584C3A195A221E59": {
              "pays_executed": "4.19284145965/USD/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
              "gets_executed": "955.967853/XRP",
              "pays_final": "13630.84998220238/USD/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
              "gets_final": "3,107,833.795934/XRP",
              "owner": "rEhKZcz5Ndjm9BzZmmKrtvhXPnSWByssDv"
            }
          }
          ## rhsxr2aAddyCKx5iZctebT4Padxv6iWDxb
          assert.deepEqual executed_offers(meta), expected
          done()